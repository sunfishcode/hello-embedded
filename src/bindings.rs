// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod sketch {
  pub mod embedded {
    
    #[allow(clippy::all)]
    pub mod delay {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// Delay with up to nanosecond precision.
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Delay{
        handle: wit_bindgen::rt::Resource<Delay>,
      }
      
      impl Delay{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for Delay{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "sketch:embedded/delay@0.0.0")]
            extern "C" {
              #[link_name = "[resource-drop]delay"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl Delay {
        #[allow(unused_unsafe, clippy::all)]
        /// Pauses execution for at minimum `ns` nanoseconds. Pause can be
        /// longer if the implementation requires it due to precision/timing
        /// issues.
        pub fn delay_ns(&self,ns: u32,){
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/delay@0.0.0")]
            extern "C" {
              #[link_name = "[method]delay.delay-ns"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(ns));
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod digital {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// Operation errors.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum ErrorCode {
        /// An error occurred.
        Other,
      }
      impl ErrorCode{
        pub fn name(&self) -> &'static str {
          match self {
            ErrorCode::Other => "other",
          }
        }
        pub fn message(&self) -> &'static str {
          match self {
            ErrorCode::Other => "An error occurred.",
          }
        }
      }
      impl ::core::fmt::Debug for ErrorCode{
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ErrorCode")
          .field("code", &(*self as i32))
          .field("name", &self.name())
          .field("message", &self.message())
          .finish()
        }
      }
      impl ::core::fmt::Display for ErrorCode{
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{} (error {})", self.name(), *self as i32)
        }
      }
      
      #[cfg(feature = "std")]impl std::error::Error for ErrorCode{}
      
      impl ErrorCode{
        pub(crate) unsafe fn _lift(val: u8) -> ErrorCode{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => ErrorCode::Other,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      /// Digital output pin state.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum PinState {
        Low,
        High,
      }
      impl ::core::fmt::Debug for PinState {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            PinState::Low => {
              f.debug_tuple("PinState::Low").finish()
            }
            PinState::High => {
              f.debug_tuple("PinState::High").finish()
            }
          }
        }
      }
      
      impl PinState{
        pub(crate) unsafe fn _lift(val: u8) -> PinState{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => PinState::Low,
            1 => PinState::High,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      /// Single digital input pin.
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct InputPin{
        handle: wit_bindgen::rt::Resource<InputPin>,
      }
      
      impl InputPin{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for InputPin{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "sketch:embedded/digital@0.0.0")]
            extern "C" {
              #[link_name = "[resource-drop]input-pin"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      /// Single digital input pin.
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct OutputPin{
        handle: wit_bindgen::rt::Resource<OutputPin>,
      }
      
      impl OutputPin{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for OutputPin{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "sketch:embedded/digital@0.0.0")]
            extern "C" {
              #[link_name = "[resource-drop]output-pin"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      /// Push-pull output pin that can read its output state.
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct StatefulOutputPin{
        handle: wit_bindgen::rt::Resource<StatefulOutputPin>,
      }
      
      impl StatefulOutputPin{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for StatefulOutputPin{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "sketch:embedded/digital@0.0.0")]
            extern "C" {
              #[link_name = "[resource-drop]stateful-output-pin"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl InputPin {
        #[allow(unused_unsafe, clippy::all)]
        /// Is the input pin low?
        pub fn is_low(&self,) -> Result<bool,ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/digital@0.0.0")]
            extern "C" {
              #[link_name = "[method]input-pin.is-low"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  wit_bindgen::rt::bool_lift(l2 as u8)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl InputPin {
        #[allow(unused_unsafe, clippy::all)]
        /// Is the input pin high?
        pub fn is_high(&self,) -> Result<bool,ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/digital@0.0.0")]
            extern "C" {
              #[link_name = "[method]input-pin.is-high"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  wit_bindgen::rt::bool_lift(l2 as u8)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl OutputPin {
        #[allow(unused_unsafe, clippy::all)]
        /// Drives the pin low.
        pub fn set_low(&self,) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/digital@0.0.0")]
            extern "C" {
              #[link_name = "[method]output-pin.set-low"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  ErrorCode::_lift(l2 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl OutputPin {
        #[allow(unused_unsafe, clippy::all)]
        /// Drives the pin high.
        pub fn set_high(&self,) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/digital@0.0.0")]
            extern "C" {
              #[link_name = "[method]output-pin.set-high"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  ErrorCode::_lift(l2 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl OutputPin {
        #[allow(unused_unsafe, clippy::all)]
        /// Drives the pin high or low depending on the provided value.
        pub fn set_state(&self,state: PinState,) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/digital@0.0.0")]
            extern "C" {
              #[link_name = "[method]output-pin.set-state"]
              fn wit_import(_: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, state.clone() as i32, ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  ErrorCode::_lift(l2 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl StatefulOutputPin {
        #[allow(unused_unsafe, clippy::all)]
        /// Is the pin in drive high mode?
        pub fn is_set_high(&self,) -> Result<bool,ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/digital@0.0.0")]
            extern "C" {
              #[link_name = "[method]stateful-output-pin.is-set-high"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  wit_bindgen::rt::bool_lift(l2 as u8)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl StatefulOutputPin {
        #[allow(unused_unsafe, clippy::all)]
        /// Is the pin in drive low mode?
        pub fn is_set_low(&self,) -> Result<bool,ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/digital@0.0.0")]
            extern "C" {
              #[link_name = "[method]stateful-output-pin.is-set-low"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  wit_bindgen::rt::bool_lift(l2 as u8)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl StatefulOutputPin {
        #[allow(unused_unsafe, clippy::all)]
        /// Toggle pin output.
        pub fn toggle(&self,) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/digital@0.0.0")]
            extern "C" {
              #[link_name = "[method]stateful-output-pin.toggle"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  ErrorCode::_lift(l2 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod i2c {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// An address value, in either 7-bit or 10-bit form, depending on the device.
      pub type Address = u16;
      /// No-acknowledge error source.
      /// 
      /// In cases where it is possible, a device should indicate if a no
      /// acknowledge response was received to an address versus a no acknowledge
      /// to a data byte. Where it is not possible to differentiate, Unknown
      /// should be indicated.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum NoAcknowledgeSource {
        /// The device did not acknowledge its address. The device may be
        /// missing.
        Address,
        /// The device did not acknowledge the data. It may not be ready to
        /// process requests at the moment.
        Data,
        /// Either the device did not acknowledge its address or the data, but
        /// it is unknown which.
        Unknown,
      }
      impl ::core::fmt::Debug for NoAcknowledgeSource {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            NoAcknowledgeSource::Address => {
              f.debug_tuple("NoAcknowledgeSource::Address").finish()
            }
            NoAcknowledgeSource::Data => {
              f.debug_tuple("NoAcknowledgeSource::Data").finish()
            }
            NoAcknowledgeSource::Unknown => {
              f.debug_tuple("NoAcknowledgeSource::Unknown").finish()
            }
          }
        }
      }
      
      impl NoAcknowledgeSource{
        pub(crate) unsafe fn _lift(val: u8) -> NoAcknowledgeSource{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => NoAcknowledgeSource::Address,
            1 => NoAcknowledgeSource::Data,
            2 => NoAcknowledgeSource::Unknown,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      /// Operation errors.
      #[derive(Clone, Copy)]
      pub enum ErrorCode{
        /// Bus error occurred. e.g. A START or a STOP condition is detected and
        /// is not located after a multiple of 9 SCL clock pulses.
        Bus,
        /// The arbitration was lost, e.g. electrical problems with the clock signal.
        ArbitrationLoss,
        /// A bus operation was not acknowledged, e.g. due to the addressed
        /// device not being available on the bus or the device not being ready
        /// to process requests at the moment.
        NoAcknowledge(NoAcknowledgeSource),
        /// The peripheral receive buffer was overrun.
        Overrun,
        /// A different error occurred.
        Other,
      }
      impl ::core::fmt::Debug for ErrorCode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            ErrorCode::Bus => {
              f.debug_tuple("ErrorCode::Bus").finish()
            }
            ErrorCode::ArbitrationLoss => {
              f.debug_tuple("ErrorCode::ArbitrationLoss").finish()
            }
            ErrorCode::NoAcknowledge(e) => {
              f.debug_tuple("ErrorCode::NoAcknowledge").field(e).finish()
            }
            ErrorCode::Overrun => {
              f.debug_tuple("ErrorCode::Overrun").finish()
            }
            ErrorCode::Other => {
              f.debug_tuple("ErrorCode::Other").finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for ErrorCode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }
      
      #[cfg(feature = "std")]impl std::error::Error for ErrorCode {}
      /// An operation used by the `transction` method.
      #[derive(Clone)]
      pub enum Operation{
        /// Read the give number of bytes.
        Read(u64),
        /// Write the given bytes.
        Write(wit_bindgen::rt::vec::Vec::<u8>),
      }
      impl ::core::fmt::Debug for Operation {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Operation::Read(e) => {
              f.debug_tuple("Operation::Read").field(e).finish()
            }
            Operation::Write(e) => {
              f.debug_tuple("Operation::Write").field(e).finish()
            }
          }
        }
      }
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct I2c{
        handle: wit_bindgen::rt::Resource<I2c>,
      }
      
      impl I2c{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for I2c{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "sketch:embedded/i2c@0.0.0")]
            extern "C" {
              #[link_name = "[resource-drop]i2c"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl I2c {
        #[allow(unused_unsafe, clippy::all)]
        /// Execute the provided `operation`s on the I²C bus.
        pub fn transaction(&self,address: Address,operations: &[Operation],) -> Result<wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::vec::Vec::<u8>>,ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec1 = operations;
            let len1 = vec1.len() as i32;
            let layout1 = alloc::Layout::from_size_align_unchecked(vec1.len() * 16, 8);
            let result1 = if layout1.size() != 0
            {
              let ptr = alloc::alloc(layout1);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout1);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec1.into_iter().enumerate() {
              let base = result1 as i32 + (i as i32) * 16;
              {
                match e {
                  Operation::Read(e) => {
                    *((base + 0) as *mut u8) = (0i32) as u8;
                    *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                  },
                  Operation::Write(e) => {
                    *((base + 0) as *mut u8) = (1i32) as u8;
                    let vec0 = e;
                    let ptr0 = vec0.as_ptr() as i32;
                    let len0 = vec0.len() as i32;
                    *((base + 12) as *mut i32) = len0;
                    *((base + 8) as *mut i32) = ptr0;
                  },
                }
              }
            }
            let ptr2 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/i2c@0.0.0")]
            extern "C" {
              #[link_name = "[method]i2c.transaction"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(address), result1 as i32, len1, ptr2);
            let l3 = i32::from(*((ptr2 + 0) as *const u8));
            if layout1.size() != 0 {
              alloc::dealloc(result1, layout1);
            }
            match l3 {
              0 => {
                let e = {
                  let l4 = *((ptr2 + 4) as *const i32);
                  let l5 = *((ptr2 + 8) as *const i32);
                  let base9 = l4;
                  let len9 = l5;
                  let mut result9 = Vec::with_capacity(len9 as usize);
                  for i in 0..len9 {
                    let base = base9 + i * 8;
                    let e9 = {
                      let l6 = *((base + 0) as *const i32);
                      let l7 = *((base + 4) as *const i32);
                      let len8 = l7 as usize;
                      
                      Vec::from_raw_parts(l6 as *mut _, len8, len8)
                    };
                    result9.push(e9);
                  }
                  wit_bindgen::rt::dealloc(base9, (len9 as usize) * 8, 4);
                  
                  result9
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l10 = i32::from(*((ptr2 + 4) as *const u8));
                  let v12 = match l10 {
                    0 => {
                      ErrorCode::Bus
                    }
                    1 => {
                      ErrorCode::ArbitrationLoss
                    }
                    2 => {
                      let e12 = {
                        let l11 = i32::from(*((ptr2 + 5) as *const u8));
                        
                        NoAcknowledgeSource::_lift(l11 as u8)
                      };
                      ErrorCode::NoAcknowledge(e12)
                    }
                    3 => {
                      ErrorCode::Overrun
                    }
                    n => {
                      debug_assert_eq!(n, 4, "invalid enum discriminant");
                      ErrorCode::Other
                    }
                  };
                  
                  v12
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl I2c {
        #[allow(unused_unsafe, clippy::all)]
        /// Reads `len` bytes from address `address`.
        pub fn read(&self,address: Address,len: u64,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/i2c@0.0.0")]
            extern "C" {
              #[link_name = "[method]i2c.read"]
              fn wit_import(_: i32, _: i32, _: i64, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i64, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(address), wit_bindgen::rt::as_i64(len), ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = {
                  let l2 = *((ptr0 + 4) as *const i32);
                  let l3 = *((ptr0 + 8) as *const i32);
                  let len4 = l3 as usize;
                  
                  Vec::from_raw_parts(l2 as *mut _, len4, len4)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l5 = i32::from(*((ptr0 + 4) as *const u8));
                  let v7 = match l5 {
                    0 => {
                      ErrorCode::Bus
                    }
                    1 => {
                      ErrorCode::ArbitrationLoss
                    }
                    2 => {
                      let e7 = {
                        let l6 = i32::from(*((ptr0 + 5) as *const u8));
                        
                        NoAcknowledgeSource::_lift(l6 as u8)
                      };
                      ErrorCode::NoAcknowledge(e7)
                    }
                    3 => {
                      ErrorCode::Overrun
                    }
                    n => {
                      debug_assert_eq!(n, 4, "invalid enum discriminant");
                      ErrorCode::Other
                    }
                  };
                  
                  v7
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl I2c {
        #[allow(unused_unsafe, clippy::all)]
        /// Writes bytes to address `address`.
        pub fn write(&self,address: Address,data: &[u8],) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 3]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = data;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/i2c@0.0.0")]
            extern "C" {
              #[link_name = "[method]i2c.write"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(address), ptr0, len0, ptr1);
            let l2 = i32::from(*((ptr1 + 0) as *const u8));
            match l2 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*((ptr1 + 1) as *const u8));
                  let v5 = match l3 {
                    0 => {
                      ErrorCode::Bus
                    }
                    1 => {
                      ErrorCode::ArbitrationLoss
                    }
                    2 => {
                      let e5 = {
                        let l4 = i32::from(*((ptr1 + 2) as *const u8));
                        
                        NoAcknowledgeSource::_lift(l4 as u8)
                      };
                      ErrorCode::NoAcknowledge(e5)
                    }
                    3 => {
                      ErrorCode::Overrun
                    }
                    n => {
                      debug_assert_eq!(n, 4, "invalid enum discriminant");
                      ErrorCode::Other
                    }
                  };
                  
                  v5
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl I2c {
        #[allow(unused_unsafe, clippy::all)]
        /// Writes bytes to address `address` and then reads `read-len` bytes
        /// in a single transaction.
        pub fn write_read(&self,address: Address,write: &[u8],read_len: u64,) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 3]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = write;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/i2c@0.0.0")]
            extern "C" {
              #[link_name = "[method]i2c.write-read"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i64, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i64, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(address), ptr0, len0, wit_bindgen::rt::as_i64(read_len), ptr1);
            let l2 = i32::from(*((ptr1 + 0) as *const u8));
            match l2 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*((ptr1 + 1) as *const u8));
                  let v5 = match l3 {
                    0 => {
                      ErrorCode::Bus
                    }
                    1 => {
                      ErrorCode::ArbitrationLoss
                    }
                    2 => {
                      let e5 = {
                        let l4 = i32::from(*((ptr1 + 2) as *const u8));
                        
                        NoAcknowledgeSource::_lift(l4 as u8)
                      };
                      ErrorCode::NoAcknowledge(e5)
                    }
                    3 => {
                      ErrorCode::Overrun
                    }
                    n => {
                      debug_assert_eq!(n, 4, "invalid enum discriminant");
                      ErrorCode::Other
                    }
                  };
                  
                  v5
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod pwm {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// Operation errors.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum ErrorCode {
        /// An error occurred.
        Other,
      }
      impl ErrorCode{
        pub fn name(&self) -> &'static str {
          match self {
            ErrorCode::Other => "other",
          }
        }
        pub fn message(&self) -> &'static str {
          match self {
            ErrorCode::Other => "An error occurred.",
          }
        }
      }
      impl ::core::fmt::Debug for ErrorCode{
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ErrorCode")
          .field("code", &(*self as i32))
          .field("name", &self.name())
          .field("message", &self.message())
          .finish()
        }
      }
      impl ::core::fmt::Display for ErrorCode{
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{} (error {})", self.name(), *self as i32)
        }
      }
      
      #[cfg(feature = "std")]impl std::error::Error for ErrorCode{}
      
      impl ErrorCode{
        pub(crate) unsafe fn _lift(val: u8) -> ErrorCode{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => ErrorCode::Other,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      /// Single PWM channel / pin.
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct SetDutyCycle{
        handle: wit_bindgen::rt::Resource<SetDutyCycle>,
      }
      
      impl SetDutyCycle{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for SetDutyCycle{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "sketch:embedded/pwm@0.0.0")]
            extern "C" {
              #[link_name = "[resource-drop]set-duty-cycle"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl SetDutyCycle {
        #[allow(unused_unsafe, clippy::all)]
        /// Get the maximum duty cycle value.
        /// 
        /// This value corresponds to a 100% duty cycle.
        pub fn max_duty_cycle(&self,) -> u16{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/pwm@0.0.0")]
            extern "C" {
              #[link_name = "[method]set-duty-cycle.max-duty-cycle"]
              fn wit_import(_: i32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32);
            ret as u16
          }
        }
      }
      impl SetDutyCycle {
        #[allow(unused_unsafe, clippy::all)]
        /// Set the duty cycle to `duty / max_duty`.
        /// 
        /// Traps if the duty cycle value is greater than the maximum duty
        /// cycle value, as reported by `max-duty-cycle`.
        pub fn set_duty_cycle(&self,duty: u16,) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/pwm@0.0.0")]
            extern "C" {
              #[link_name = "[method]set-duty-cycle.set-duty-cycle"]
              fn wit_import(_: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(duty), ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  ErrorCode::_lift(l2 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl SetDutyCycle {
        #[allow(unused_unsafe, clippy::all)]
        /// Set the duty cycle to 0%, or always inactive.
        pub fn set_duty_cycle_fully_off(&self,) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/pwm@0.0.0")]
            extern "C" {
              #[link_name = "[method]set-duty-cycle.set-duty-cycle-fully-off"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  ErrorCode::_lift(l2 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl SetDutyCycle {
        #[allow(unused_unsafe, clippy::all)]
        /// Set the duty cycle to 100%, or always active.
        pub fn set_duty_cycle_fully_on(&self,) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/pwm@0.0.0")]
            extern "C" {
              #[link_name = "[method]set-duty-cycle.set-duty-cycle-fully-on"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  ErrorCode::_lift(l2 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl SetDutyCycle {
        #[allow(unused_unsafe, clippy::all)]
        /// Set the duty cycle to `num / denom`.
        /// 
        /// Traps if `num` is greater than `denom`, or if `denom` is zero.
        pub fn set_duty_cycle_fraction(&self,num: u16,denom: u16,) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/pwm@0.0.0")]
            extern "C" {
              #[link_name = "[method]set-duty-cycle.set-duty-cycle-fraction"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(num), wit_bindgen::rt::as_i32(denom), ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  ErrorCode::_lift(l2 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl SetDutyCycle {
        #[allow(unused_unsafe, clippy::all)]
        /// Set the duty cycle to `percent / 100`.
        /// 
        /// Traps if `percent` is greater than 100.
        pub fn set_duty_cycle_percent(&self,percent: u8,) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/pwm@0.0.0")]
            extern "C" {
              #[link_name = "[method]set-duty-cycle.set-duty-cycle-percent"]
              fn wit_import(_: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(percent), ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  ErrorCode::_lift(l2 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod spi {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// Clock polarity.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum Polarity {
        /// Clock signal low when idle.
        IdleLow,
        /// Clock signal high when idle.
        IdleHigh,
      }
      impl ::core::fmt::Debug for Polarity {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Polarity::IdleLow => {
              f.debug_tuple("Polarity::IdleLow").finish()
            }
            Polarity::IdleHigh => {
              f.debug_tuple("Polarity::IdleHigh").finish()
            }
          }
        }
      }
      
      impl Polarity{
        pub(crate) unsafe fn _lift(val: u8) -> Polarity{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => Polarity::IdleLow,
            1 => Polarity::IdleHigh,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      /// Clock phase.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum Phase {
        /// Data in “captured” on the first clock transition.
        CaptureOnFirstTransition,
        /// Data in “captured” on the second clock transition.
        CaptureOnSecondTransition,
      }
      impl ::core::fmt::Debug for Phase {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Phase::CaptureOnFirstTransition => {
              f.debug_tuple("Phase::CaptureOnFirstTransition").finish()
            }
            Phase::CaptureOnSecondTransition => {
              f.debug_tuple("Phase::CaptureOnSecondTransition").finish()
            }
          }
        }
      }
      
      impl Phase{
        pub(crate) unsafe fn _lift(val: u8) -> Phase{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => Phase::CaptureOnFirstTransition,
            1 => Phase::CaptureOnSecondTransition,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      /// SPI mode.
      #[repr(C)]
      #[derive(Clone, Copy)]
      pub struct Mode {
        /// Clock polarity.
        pub polarity: Polarity,
        /// Clock phase.
        pub phase: Phase,
      }
      impl ::core::fmt::Debug for Mode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Mode").field("polarity", &self.polarity).field("phase", &self.phase).finish()
        }
      }
      /// SPI error kind.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum ErrorCode {
        /// The peripheral receive buffer was overrun.
        Overrun,
        /// Multiple devices on the SPI bus are trying to drive the chip
        /// select pin.
        ModeFault,
        /// Received data does not conform to the peripheral configuration.
        FrameFormat,
        /// An error occurred while asserting or deasserting the
        /// Chip Select pin.
        ChipSelectFault,
        /// A different error occurred.
        Other,
      }
      impl ErrorCode{
        pub fn name(&self) -> &'static str {
          match self {
            ErrorCode::Overrun => "overrun",
            ErrorCode::ModeFault => "mode-fault",
            ErrorCode::FrameFormat => "frame-format",
            ErrorCode::ChipSelectFault => "chip-select-fault",
            ErrorCode::Other => "other",
          }
        }
        pub fn message(&self) -> &'static str {
          match self {
            ErrorCode::Overrun => "The peripheral receive buffer was overrun.",
            ErrorCode::ModeFault => "Multiple devices on the SPI bus are trying to drive the chip
            select pin.",
            ErrorCode::FrameFormat => "Received data does not conform to the peripheral configuration.",
            ErrorCode::ChipSelectFault => "An error occurred while asserting or deasserting the
            Chip Select pin.",
            ErrorCode::Other => "A different error occurred.",
          }
        }
      }
      impl ::core::fmt::Debug for ErrorCode{
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ErrorCode")
          .field("code", &(*self as i32))
          .field("name", &self.name())
          .field("message", &self.message())
          .finish()
        }
      }
      impl ::core::fmt::Display for ErrorCode{
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{} (error {})", self.name(), *self as i32)
        }
      }
      
      #[cfg(feature = "std")]impl std::error::Error for ErrorCode{}
      
      impl ErrorCode{
        pub(crate) unsafe fn _lift(val: u8) -> ErrorCode{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => ErrorCode::Overrun,
            1 => ErrorCode::ModeFault,
            2 => ErrorCode::FrameFormat,
            3 => ErrorCode::ChipSelectFault,
            4 => ErrorCode::Other,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      /// Word size.
      /// 
      /// TODO: Support up to `u16` word sizes?
      pub type Word = u8;
      /// SPI transaction operation.
      /// 
      /// This allows composition of SPI operations into a single bus transaction.
      #[derive(Clone)]
      pub enum Operation{
        /// Read data.
        Read(u64),
        /// Write data from the provided list, discarding read data.
        Write(wit_bindgen::rt::vec::Vec::<Word>),
        /// Read data, while writing data from the buffer.
        Transfer((u64,wit_bindgen::rt::vec::Vec::<Word>,)),
        /// Delay for at least the specified number of nanoseconds.
        DelayNs(u32),
      }
      impl ::core::fmt::Debug for Operation {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Operation::Read(e) => {
              f.debug_tuple("Operation::Read").field(e).finish()
            }
            Operation::Write(e) => {
              f.debug_tuple("Operation::Write").field(e).finish()
            }
            Operation::Transfer(e) => {
              f.debug_tuple("Operation::Transfer").field(e).finish()
            }
            Operation::DelayNs(e) => {
              f.debug_tuple("Operation::DelayNs").field(e).finish()
            }
          }
        }
      }
      /// SPI bus.
      /// 
      /// `bus` represents exclusive ownership over the whole SPI bus, with SCK,
      /// MOSI and MISO pins.
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Bus{
        handle: wit_bindgen::rt::Resource<Bus>,
      }
      
      impl Bus{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for Bus{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "sketch:embedded/spi@0.0.0")]
            extern "C" {
              #[link_name = "[resource-drop]bus"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      /// SPI device trait.
      /// 
      /// `device` represents ownership over a single SPI device on a (possibly
      /// shared) bus, selected with a CS (Chip Select) pin.
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Device{
        handle: wit_bindgen::rt::Resource<Device>,
      }
      
      impl Device{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for Device{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "sketch:embedded/spi@0.0.0")]
            extern "C" {
              #[link_name = "[resource-drop]device"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      #[allow(unused_unsafe, clippy::all)]
      /// Helper for CPOL = 0, CPHA = 0.
      pub fn mode0() -> Mode{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(1))]
          struct RetArea([u8; 2]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "sketch:embedded/spi@0.0.0")]
          extern "C" {
            #[link_name = "mode0"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = i32::from(*((ptr0 + 0) as *const u8));
          let l2 = i32::from(*((ptr0 + 1) as *const u8));
          Mode{
            polarity: Polarity::_lift(l1 as u8),
            phase: Phase::_lift(l2 as u8),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Helper for CPOL = 0, CPHA = 1.
      pub fn mode1() -> Mode{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(1))]
          struct RetArea([u8; 2]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "sketch:embedded/spi@0.0.0")]
          extern "C" {
            #[link_name = "mode1"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = i32::from(*((ptr0 + 0) as *const u8));
          let l2 = i32::from(*((ptr0 + 1) as *const u8));
          Mode{
            polarity: Polarity::_lift(l1 as u8),
            phase: Phase::_lift(l2 as u8),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Helper for CPOL = 1, CPHA = 0.
      pub fn mode2() -> Mode{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(1))]
          struct RetArea([u8; 2]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "sketch:embedded/spi@0.0.0")]
          extern "C" {
            #[link_name = "mode2"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = i32::from(*((ptr0 + 0) as *const u8));
          let l2 = i32::from(*((ptr0 + 1) as *const u8));
          Mode{
            polarity: Polarity::_lift(l1 as u8),
            phase: Phase::_lift(l2 as u8),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Helper for CPOL = 1, CPHA = 1.
      pub fn mode3() -> Mode{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(1))]
          struct RetArea([u8; 2]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "sketch:embedded/spi@0.0.0")]
          extern "C" {
            #[link_name = "mode3"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = i32::from(*((ptr0 + 0) as *const u8));
          let l2 = i32::from(*((ptr0 + 1) as *const u8));
          Mode{
            polarity: Polarity::_lift(l1 as u8),
            phase: Phase::_lift(l2 as u8),
          }
        }
      }
      impl Bus {
        #[allow(unused_unsafe, clippy::all)]
        /// Read words.
        /// 
        /// The word value sent on MOSI during reading is
        /// implementation-defined, typically 0x00, 0xFF, or configurable.
        /// 
        /// Implementations are allowed to return before the operation is complete.
        pub fn read(&self,len: u64,) -> Result<wit_bindgen::rt::vec::Vec::<Word>,ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/spi@0.0.0")]
            extern "C" {
              #[link_name = "[method]bus.read"]
              fn wit_import(_: i32, _: i64, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(len), ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = {
                  let l2 = *((ptr0 + 4) as *const i32);
                  let l3 = *((ptr0 + 8) as *const i32);
                  let len4 = l3 as usize;
                  
                  Vec::from_raw_parts(l2 as *mut _, len4, len4)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l5 = i32::from(*((ptr0 + 4) as *const u8));
                  
                  ErrorCode::_lift(l5 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Bus {
        #[allow(unused_unsafe, clippy::all)]
        /// Write `words`, ignoring all the incoming words.
        /// 
        /// Implementations are allowed to return before the operation is complete.
        pub fn write(&self,words: &[Word],) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = words;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/spi@0.0.0")]
            extern "C" {
              #[link_name = "[method]bus.write"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0, len0, ptr1);
            let l2 = i32::from(*((ptr1 + 0) as *const u8));
            match l2 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*((ptr1 + 1) as *const u8));
                  
                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Bus {
        #[allow(unused_unsafe, clippy::all)]
        /// Write and read simultaneously. `write` is written on MOSI and words
        /// received on MISO are returned.
        /// 
        /// It is allowed for `read-len` and `write`'s length to be different,
        /// even zero length. The transfer runs for `max(read-len, write.len())`
        /// words. If `read-len` is shorter, incoming words after `read-len` has
        /// been filled will be discarded. If `write` is shorter, the value of
        /// words sent in MOSI after all `write` has been sent is
        /// implementation-defined, typically `0x00`, `0xFF`, or configurable.
        /// 
        /// Implementations are allowed to return before the operation is complete.
        pub fn transfer(&self,read_len: u64,write: &[Word],) -> Result<wit_bindgen::rt::vec::Vec::<Word>,ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = write;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/spi@0.0.0")]
            extern "C" {
              #[link_name = "[method]bus.transfer"]
              fn wit_import(_: i32, _: i64, _: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(read_len), ptr0, len0, ptr1);
            let l2 = i32::from(*((ptr1 + 0) as *const u8));
            match l2 {
              0 => {
                let e = {
                  let l3 = *((ptr1 + 4) as *const i32);
                  let l4 = *((ptr1 + 8) as *const i32);
                  let len5 = l4 as usize;
                  
                  Vec::from_raw_parts(l3 as *mut _, len5, len5)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l6 = i32::from(*((ptr1 + 4) as *const u8));
                  
                  ErrorCode::_lift(l6 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Bus {
        #[allow(unused_unsafe, clippy::all)]
        /// Wait until all operations have completed and the bus is idle.
        pub fn flush(&self,) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/spi@0.0.0")]
            extern "C" {
              #[link_name = "[method]bus.flush"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l2 = i32::from(*((ptr0 + 1) as *const u8));
                  
                  ErrorCode::_lift(l2 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Device {
        #[allow(unused_unsafe, clippy::all)]
        /// Perform a transaction against the device.
        /// 
        /// - Locks the bus
        /// - Asserts the CS (Chip Select) pin.
        /// - Performs all the operations.
        /// - Flushes the bus.
        /// - Deasserts the CS pin.
        /// - Unlocks the bus.
        /// 
        /// The locking mechanism is implementation-defined. The only
        /// requirement is it must prevent two transactions from executing
        /// concurrently against the same bus. Examples of implementations are:
        /// critical sections, blocking mutexes, returning an error or
        /// panicking if the bus is already busy. On bus errors the
        /// implementation should try to deassert CS. If an error occurs while
        /// deasserting CS the bus error should take priority as the return
        /// value.
        pub fn transaction(&self,operations: &[Operation],) -> Result<wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::vec::Vec::<Word>>,ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec3 = operations;
            let len3 = vec3.len() as i32;
            let layout3 = alloc::Layout::from_size_align_unchecked(vec3.len() * 24, 8);
            let result3 = if layout3.size() != 0
            {
              let ptr = alloc::alloc(layout3);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout3);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec3.into_iter().enumerate() {
              let base = result3 as i32 + (i as i32) * 24;
              {
                match e {
                  Operation::Read(e) => {
                    *((base + 0) as *mut u8) = (0i32) as u8;
                    *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                  },
                  Operation::Write(e) => {
                    *((base + 0) as *mut u8) = (1i32) as u8;
                    let vec0 = e;
                    let ptr0 = vec0.as_ptr() as i32;
                    let len0 = vec0.len() as i32;
                    *((base + 12) as *mut i32) = len0;
                    *((base + 8) as *mut i32) = ptr0;
                  },
                  Operation::Transfer(e) => {
                    *((base + 0) as *mut u8) = (2i32) as u8;
                    let (t1_0, t1_1, ) = e;
                    *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(t1_0);
                    let vec2 = t1_1;
                    let ptr2 = vec2.as_ptr() as i32;
                    let len2 = vec2.len() as i32;
                    *((base + 20) as *mut i32) = len2;
                    *((base + 16) as *mut i32) = ptr2;
                  },
                  Operation::DelayNs(e) => {
                    *((base + 0) as *mut u8) = (3i32) as u8;
                    *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                  },
                }
              }
            }
            let ptr4 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/spi@0.0.0")]
            extern "C" {
              #[link_name = "[method]device.transaction"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, result3 as i32, len3, ptr4);
            let l5 = i32::from(*((ptr4 + 0) as *const u8));
            if layout3.size() != 0 {
              alloc::dealloc(result3, layout3);
            }
            match l5 {
              0 => {
                let e = {
                  let l6 = *((ptr4 + 4) as *const i32);
                  let l7 = *((ptr4 + 8) as *const i32);
                  let base11 = l6;
                  let len11 = l7;
                  let mut result11 = Vec::with_capacity(len11 as usize);
                  for i in 0..len11 {
                    let base = base11 + i * 8;
                    let e11 = {
                      let l8 = *((base + 0) as *const i32);
                      let l9 = *((base + 4) as *const i32);
                      let len10 = l9 as usize;
                      
                      Vec::from_raw_parts(l8 as *mut _, len10, len10)
                    };
                    result11.push(e11);
                  }
                  wit_bindgen::rt::dealloc(base11, (len11 as usize) * 8, 4);
                  
                  result11
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l12 = i32::from(*((ptr4 + 4) as *const u8));
                  
                  ErrorCode::_lift(l12 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Device {
        #[allow(unused_unsafe, clippy::all)]
        /// Do a read within a transaction.
        pub fn read(&self,len: u64,) -> Result<wit_bindgen::rt::vec::Vec::<Word>,ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/spi@0.0.0")]
            extern "C" {
              #[link_name = "[method]device.read"]
              fn wit_import(_: i32, _: i64, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(len), ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = {
                  let l2 = *((ptr0 + 4) as *const i32);
                  let l3 = *((ptr0 + 8) as *const i32);
                  let len4 = l3 as usize;
                  
                  Vec::from_raw_parts(l2 as *mut _, len4, len4)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l5 = i32::from(*((ptr0 + 4) as *const u8));
                  
                  ErrorCode::_lift(l5 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Device {
        #[allow(unused_unsafe, clippy::all)]
        /// Do a write within a transaction.
        pub fn write(&self,buf: &[Word],) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = buf;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/spi@0.0.0")]
            extern "C" {
              #[link_name = "[method]device.write"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0, len0, ptr1);
            let l2 = i32::from(*((ptr1 + 0) as *const u8));
            match l2 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*((ptr1 + 1) as *const u8));
                  
                  ErrorCode::_lift(l3 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Device {
        #[allow(unused_unsafe, clippy::all)]
        /// Do a transfer within a transaction.
        pub fn transfer(&self,read_len: u64,write: &[Word],) -> Result<wit_bindgen::rt::vec::Vec::<Word>,ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = write;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/spi@0.0.0")]
            extern "C" {
              #[link_name = "[method]device.transfer"]
              fn wit_import(_: i32, _: i64, _: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(read_len), ptr0, len0, ptr1);
            let l2 = i32::from(*((ptr1 + 0) as *const u8));
            match l2 {
              0 => {
                let e = {
                  let l3 = *((ptr1 + 4) as *const i32);
                  let l4 = *((ptr1 + 8) as *const i32);
                  let len5 = l4 as usize;
                  
                  Vec::from_raw_parts(l3 as *mut _, len5, len5)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l6 = i32::from(*((ptr1 + 4) as *const u8));
                  
                  ErrorCode::_lift(l6 as u8)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod sketch {
    pub mod embedded {
      
      #[allow(clippy::all)]
      pub mod run {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type OutputPin = super::super::super::super::sketch::embedded::digital::OutputPin;
        pub type Delay = super::super::super::super::sketch::embedded::delay::Delay;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "sketch:embedded/run@0.0.0#run"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_run(arg0: i32,arg1: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::run(super::super::super::super::sketch::embedded::digital::OutputPin::from_handle(arg0 as u32), super::super::super::super::sketch::embedded::delay::Delay::from_handle(arg1 as u32));
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          /// Start the program, with an output pin and a delay mechanism.
          fn run(led: OutputPin,delay: Delay,);
        }
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:blink"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 13258] = [3, 0, 5, 98, 108, 105, 110, 107, 0, 97, 115, 109, 13, 0, 1, 0, 7, 216, 3, 1, 65, 2, 1, 66, 24, 1, 123, 4, 0, 7, 97, 100, 100, 114, 101, 115, 115, 3, 0, 0, 1, 109, 3, 7, 97, 100, 100, 114, 101, 115, 115, 4, 100, 97, 116, 97, 7, 117, 110, 107, 110, 111, 119, 110, 4, 0, 21, 110, 111, 45, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 45, 115, 111, 117, 114, 99, 101, 3, 0, 2, 1, 113, 5, 3, 98, 117, 115, 0, 0, 16, 97, 114, 98, 105, 116, 114, 97, 116, 105, 111, 110, 45, 108, 111, 115, 115, 0, 0, 14, 110, 111, 45, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 1, 3, 0, 7, 111, 118, 101, 114, 114, 117, 110, 0, 0, 5, 111, 116, 104, 101, 114, 0, 0, 4, 0, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 3, 0, 4, 1, 112, 125, 1, 113, 2, 4, 114, 101, 97, 100, 1, 119, 0, 5, 119, 114, 105, 116, 101, 1, 6, 0, 4, 0, 9, 111, 112, 101, 114, 97, 116, 105, 111, 110, 3, 0, 7, 4, 0, 3, 105, 50, 99, 3, 1, 1, 104, 9, 1, 112, 8, 1, 112, 6, 1, 106, 1, 12, 1, 5, 1, 64, 3, 4, 115, 101, 108, 102, 10, 7, 97, 100, 100, 114, 101, 115, 115, 1, 10, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 11, 0, 13, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 1, 14, 1, 106, 1, 6, 1, 5, 1, 64, 3, 4, 115, 101, 108, 102, 10, 7, 97, 100, 100, 114, 101, 115, 115, 1, 3, 108, 101, 110, 119, 0, 15, 4, 0, 16, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 114, 101, 97, 100, 1, 16, 1, 106, 0, 1, 5, 1, 64, 3, 4, 115, 101, 108, 102, 10, 7, 97, 100, 100, 114, 101, 115, 115, 1, 4, 100, 97, 116, 97, 6, 0, 17, 4, 0, 17, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 119, 114, 105, 116, 101, 1, 18, 1, 64, 4, 4, 115, 101, 108, 102, 10, 7, 97, 100, 100, 114, 101, 115, 115, 1, 5, 119, 114, 105, 116, 101, 6, 8, 114, 101, 97, 100, 45, 108, 101, 110, 119, 0, 17, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 119, 114, 105, 116, 101, 45, 114, 101, 97, 100, 1, 19, 4, 1, 25, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 105, 50, 99, 64, 48, 46, 48, 46, 48, 5, 0, 11, 9, 1, 0, 3, 105, 50, 99, 3, 0, 0, 7, 252, 3, 1, 65, 2, 1, 66, 25, 1, 109, 1, 5, 111, 116, 104, 101, 114, 4, 0, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 3, 0, 0, 1, 109, 2, 3, 108, 111, 119, 4, 104, 105, 103, 104, 4, 0, 9, 112, 105, 110, 45, 115, 116, 97, 116, 101, 3, 0, 2, 4, 0, 9, 105, 110, 112, 117, 116, 45, 112, 105, 110, 3, 1, 4, 0, 10, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 3, 1, 4, 0, 19, 115, 116, 97, 116, 101, 102, 117, 108, 45, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 3, 1, 1, 104, 4, 1, 106, 1, 127, 1, 1, 1, 64, 1, 4, 115, 101, 108, 102, 7, 0, 8, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 105, 110, 112, 117, 116, 45, 112, 105, 110, 46, 105, 115, 45, 108, 111, 119, 1, 9, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 105, 110, 112, 117, 116, 45, 112, 105, 110, 46, 105, 115, 45, 104, 105, 103, 104, 1, 9, 1, 104, 5, 1, 106, 0, 1, 1, 1, 64, 1, 4, 115, 101, 108, 102, 10, 0, 11, 4, 0, 26, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 115, 101, 116, 45, 108, 111, 119, 1, 12, 4, 0, 27, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 115, 101, 116, 45, 104, 105, 103, 104, 1, 12, 1, 64, 2, 4, 115, 101, 108, 102, 10, 5, 115, 116, 97, 116, 101, 3, 0, 11, 4, 0, 28, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 115, 101, 116, 45, 115, 116, 97, 116, 101, 1, 13, 1, 104, 6, 1, 64, 1, 4, 115, 101, 108, 102, 14, 0, 8, 4, 0, 39, 91, 109, 101, 116, 104, 111, 100, 93, 115, 116, 97, 116, 101, 102, 117, 108, 45, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 105, 115, 45, 115, 101, 116, 45, 104, 105, 103, 104, 1, 15, 4, 0, 38, 91, 109, 101, 116, 104, 111, 100, 93, 115, 116, 97, 116, 101, 102, 117, 108, 45, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 105, 115, 45, 115, 101, 116, 45, 108, 111, 119, 1, 15, 1, 64, 1, 4, 115, 101, 108, 102, 14, 0, 11, 4, 0, 34, 91, 109, 101, 116, 104, 111, 100, 93, 115, 116, 97, 116, 101, 102, 117, 108, 45, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 116, 111, 103, 103, 108, 101, 1, 16, 4, 1, 29, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 100, 105, 103, 105, 116, 97, 108, 64, 48, 46, 48, 46, 48, 5, 0, 11, 13, 1, 0, 7, 100, 105, 103, 105, 116, 97, 108, 3, 2, 0, 7, 93, 1, 65, 2, 1, 66, 4, 4, 0, 5, 100, 101, 108, 97, 121, 3, 1, 1, 104, 0, 1, 64, 2, 4, 115, 101, 108, 102, 1, 2, 110, 115, 121, 1, 0, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 108, 97, 121, 46, 100, 101, 108, 97, 121, 45, 110, 115, 1, 2, 4, 1, 27, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 100, 101, 108, 97, 121, 64, 48, 46, 48, 46, 48, 5, 0, 11, 11, 1, 0, 5, 100, 101, 108, 97, 121, 3, 4, 0, 7, 188, 2, 1, 65, 8, 1, 66, 7, 1, 109, 1, 5, 111, 116, 104, 101, 114, 4, 0, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 3, 0, 0, 1, 109, 2, 3, 108, 111, 119, 4, 104, 105, 103, 104, 4, 0, 9, 112, 105, 110, 45, 115, 116, 97, 116, 101, 3, 0, 2, 4, 0, 9, 105, 110, 112, 117, 116, 45, 112, 105, 110, 3, 1, 4, 0, 10, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 3, 1, 4, 0, 19, 115, 116, 97, 116, 101, 102, 117, 108, 45, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 3, 1, 3, 1, 29, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 100, 105, 103, 105, 116, 97, 108, 64, 48, 46, 48, 46, 48, 5, 0, 1, 66, 1, 4, 0, 5, 100, 101, 108, 97, 121, 3, 1, 3, 1, 27, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 100, 101, 108, 97, 121, 64, 48, 46, 48, 46, 48, 5, 1, 2, 3, 0, 0, 10, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 2, 3, 0, 1, 5, 100, 101, 108, 97, 121, 1, 66, 8, 2, 3, 2, 1, 2, 4, 0, 10, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 3, 0, 0, 2, 3, 2, 1, 3, 4, 0, 5, 100, 101, 108, 97, 121, 3, 0, 2, 1, 105, 1, 1, 105, 3, 1, 64, 2, 3, 108, 101, 100, 4, 5, 100, 101, 108, 97, 121, 5, 1, 0, 4, 0, 3, 114, 117, 110, 1, 6, 4, 1, 25, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 114, 117, 110, 64, 48, 46, 48, 46, 48, 5, 4, 11, 9, 1, 0, 3, 114, 117, 110, 3, 6, 0, 7, 202, 3, 1, 65, 2, 1, 66, 16, 1, 109, 1, 5, 111, 116, 104, 101, 114, 4, 0, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 3, 0, 0, 4, 0, 14, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 3, 1, 1, 104, 2, 1, 64, 1, 4, 115, 101, 108, 102, 3, 0, 123, 4, 0, 37, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 109, 97, 120, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 1, 4, 1, 106, 0, 1, 1, 1, 64, 2, 4, 115, 101, 108, 102, 3, 4, 100, 117, 116, 121, 123, 0, 5, 4, 0, 37, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 1, 6, 1, 64, 1, 4, 115, 101, 108, 102, 3, 0, 5, 4, 0, 47, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 45, 102, 117, 108, 108, 121, 45, 111, 102, 102, 1, 7, 4, 0, 46, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 45, 102, 117, 108, 108, 121, 45, 111, 110, 1, 7, 1, 64, 3, 4, 115, 101, 108, 102, 3, 3, 110, 117, 109, 123, 5, 100, 101, 110, 111, 109, 123, 0, 5, 4, 0, 46, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 45, 102, 114, 97, 99, 116, 105, 111, 110, 1, 8, 1, 64, 2, 4, 115, 101, 108, 102, 3, 7, 112, 101, 114, 99, 101, 110, 116, 125, 0, 5, 4, 0, 45, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 45, 112, 101, 114, 99, 101, 110, 116, 1, 9, 4, 1, 25, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 112, 119, 109, 64, 48, 46, 48, 46, 48, 5, 0, 11, 9, 1, 0, 3, 112, 119, 109, 3, 8, 0, 7, 134, 6, 1, 65, 2, 1, 66, 44, 1, 109, 2, 8, 105, 100, 108, 101, 45, 108, 111, 119, 9, 105, 100, 108, 101, 45, 104, 105, 103, 104, 4, 0, 8, 112, 111, 108, 97, 114, 105, 116, 121, 3, 0, 0, 1, 109, 2, 27, 99, 97, 112, 116, 117, 114, 101, 45, 111, 110, 45, 102, 105, 114, 115, 116, 45, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 28, 99, 97, 112, 116, 117, 114, 101, 45, 111, 110, 45, 115, 101, 99, 111, 110, 100, 45, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 4, 0, 5, 112, 104, 97, 115, 101, 3, 0, 2, 1, 114, 2, 8, 112, 111, 108, 97, 114, 105, 116, 121, 1, 5, 112, 104, 97, 115, 101, 3, 4, 0, 4, 109, 111, 100, 101, 3, 0, 4, 1, 109, 5, 7, 111, 118, 101, 114, 114, 117, 110, 10, 109, 111, 100, 101, 45, 102, 97, 117, 108, 116, 12, 102, 114, 97, 109, 101, 45, 102, 111, 114, 109, 97, 116, 17, 99, 104, 105, 112, 45, 115, 101, 108, 101, 99, 116, 45, 102, 97, 117, 108, 116, 5, 111, 116, 104, 101, 114, 4, 0, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 3, 0, 6, 1, 125, 4, 0, 4, 119, 111, 114, 100, 3, 0, 8, 1, 112, 9, 1, 111, 2, 119, 10, 1, 113, 4, 4, 114, 101, 97, 100, 1, 119, 0, 5, 119, 114, 105, 116, 101, 1, 10, 0, 8, 116, 114, 97, 110, 115, 102, 101, 114, 1, 11, 0, 8, 100, 101, 108, 97, 121, 45, 110, 115, 1, 121, 0, 4, 0, 9, 111, 112, 101, 114, 97, 116, 105, 111, 110, 3, 0, 12, 4, 0, 3, 98, 117, 115, 3, 1, 4, 0, 6, 100, 101, 118, 105, 99, 101, 3, 1, 1, 104, 14, 1, 106, 1, 10, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 16, 3, 108, 101, 110, 119, 0, 17, 4, 0, 16, 91, 109, 101, 116, 104, 111, 100, 93, 98, 117, 115, 46, 114, 101, 97, 100, 1, 18, 1, 106, 0, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 16, 5, 119, 111, 114, 100, 115, 10, 0, 19, 4, 0, 17, 91, 109, 101, 116, 104, 111, 100, 93, 98, 117, 115, 46, 119, 114, 105, 116, 101, 1, 20, 1, 64, 3, 4, 115, 101, 108, 102, 16, 8, 114, 101, 97, 100, 45, 108, 101, 110, 119, 5, 119, 114, 105, 116, 101, 10, 0, 17, 4, 0, 20, 91, 109, 101, 116, 104, 111, 100, 93, 98, 117, 115, 46, 116, 114, 97, 110, 115, 102, 101, 114, 1, 21, 1, 64, 1, 4, 115, 101, 108, 102, 16, 0, 19, 4, 0, 17, 91, 109, 101, 116, 104, 111, 100, 93, 98, 117, 115, 46, 102, 108, 117, 115, 104, 1, 22, 1, 104, 15, 1, 112, 13, 1, 112, 10, 1, 106, 1, 25, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 23, 10, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 24, 0, 26, 4, 0, 26, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 118, 105, 99, 101, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 1, 27, 1, 64, 2, 4, 115, 101, 108, 102, 23, 3, 108, 101, 110, 119, 0, 17, 4, 0, 19, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 118, 105, 99, 101, 46, 114, 101, 97, 100, 1, 28, 1, 64, 2, 4, 115, 101, 108, 102, 23, 3, 98, 117, 102, 10, 0, 19, 4, 0, 20, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 118, 105, 99, 101, 46, 119, 114, 105, 116, 101, 1, 29, 1, 64, 3, 4, 115, 101, 108, 102, 23, 8, 114, 101, 97, 100, 45, 108, 101, 110, 119, 5, 119, 114, 105, 116, 101, 10, 0, 17, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 118, 105, 99, 101, 46, 116, 114, 97, 110, 115, 102, 101, 114, 1, 30, 1, 64, 0, 0, 5, 4, 0, 5, 109, 111, 100, 101, 48, 1, 31, 4, 0, 5, 109, 111, 100, 101, 49, 1, 31, 4, 0, 5, 109, 111, 100, 101, 50, 1, 31, 4, 0, 5, 109, 111, 100, 101, 51, 1, 31, 4, 1, 25, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 115, 112, 105, 64, 48, 46, 48, 46, 48, 5, 0, 11, 9, 1, 0, 3, 115, 112, 105, 3, 10, 0, 7, 150, 19, 1, 65, 2, 1, 65, 14, 1, 66, 4, 4, 0, 5, 100, 101, 108, 97, 121, 3, 1, 1, 104, 0, 1, 64, 2, 4, 115, 101, 108, 102, 1, 2, 110, 115, 121, 1, 0, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 108, 97, 121, 46, 100, 101, 108, 97, 121, 45, 110, 115, 1, 2, 3, 1, 27, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 100, 101, 108, 97, 121, 64, 48, 46, 48, 46, 48, 5, 0, 1, 66, 25, 1, 109, 1, 5, 111, 116, 104, 101, 114, 4, 0, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 3, 0, 0, 1, 109, 2, 3, 108, 111, 119, 4, 104, 105, 103, 104, 4, 0, 9, 112, 105, 110, 45, 115, 116, 97, 116, 101, 3, 0, 2, 4, 0, 9, 105, 110, 112, 117, 116, 45, 112, 105, 110, 3, 1, 4, 0, 10, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 3, 1, 4, 0, 19, 115, 116, 97, 116, 101, 102, 117, 108, 45, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 3, 1, 1, 104, 4, 1, 106, 1, 127, 1, 1, 1, 64, 1, 4, 115, 101, 108, 102, 7, 0, 8, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 105, 110, 112, 117, 116, 45, 112, 105, 110, 46, 105, 115, 45, 108, 111, 119, 1, 9, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 105, 110, 112, 117, 116, 45, 112, 105, 110, 46, 105, 115, 45, 104, 105, 103, 104, 1, 9, 1, 104, 5, 1, 106, 0, 1, 1, 1, 64, 1, 4, 115, 101, 108, 102, 10, 0, 11, 4, 0, 26, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 115, 101, 116, 45, 108, 111, 119, 1, 12, 4, 0, 27, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 115, 101, 116, 45, 104, 105, 103, 104, 1, 12, 1, 64, 2, 4, 115, 101, 108, 102, 10, 5, 115, 116, 97, 116, 101, 3, 0, 11, 4, 0, 28, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 115, 101, 116, 45, 115, 116, 97, 116, 101, 1, 13, 1, 104, 6, 1, 64, 1, 4, 115, 101, 108, 102, 14, 0, 8, 4, 0, 39, 91, 109, 101, 116, 104, 111, 100, 93, 115, 116, 97, 116, 101, 102, 117, 108, 45, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 105, 115, 45, 115, 101, 116, 45, 104, 105, 103, 104, 1, 15, 4, 0, 38, 91, 109, 101, 116, 104, 111, 100, 93, 115, 116, 97, 116, 101, 102, 117, 108, 45, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 105, 115, 45, 115, 101, 116, 45, 108, 111, 119, 1, 15, 1, 64, 1, 4, 115, 101, 108, 102, 14, 0, 11, 4, 0, 34, 91, 109, 101, 116, 104, 111, 100, 93, 115, 116, 97, 116, 101, 102, 117, 108, 45, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 116, 111, 103, 103, 108, 101, 1, 16, 3, 1, 29, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 100, 105, 103, 105, 116, 97, 108, 64, 48, 46, 48, 46, 48, 5, 1, 1, 66, 24, 1, 123, 4, 0, 7, 97, 100, 100, 114, 101, 115, 115, 3, 0, 0, 1, 109, 3, 7, 97, 100, 100, 114, 101, 115, 115, 4, 100, 97, 116, 97, 7, 117, 110, 107, 110, 111, 119, 110, 4, 0, 21, 110, 111, 45, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 45, 115, 111, 117, 114, 99, 101, 3, 0, 2, 1, 113, 5, 3, 98, 117, 115, 0, 0, 16, 97, 114, 98, 105, 116, 114, 97, 116, 105, 111, 110, 45, 108, 111, 115, 115, 0, 0, 14, 110, 111, 45, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 1, 3, 0, 7, 111, 118, 101, 114, 114, 117, 110, 0, 0, 5, 111, 116, 104, 101, 114, 0, 0, 4, 0, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 3, 0, 4, 1, 112, 125, 1, 113, 2, 4, 114, 101, 97, 100, 1, 119, 0, 5, 119, 114, 105, 116, 101, 1, 6, 0, 4, 0, 9, 111, 112, 101, 114, 97, 116, 105, 111, 110, 3, 0, 7, 4, 0, 3, 105, 50, 99, 3, 1, 1, 104, 9, 1, 112, 8, 1, 112, 6, 1, 106, 1, 12, 1, 5, 1, 64, 3, 4, 115, 101, 108, 102, 10, 7, 97, 100, 100, 114, 101, 115, 115, 1, 10, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 11, 0, 13, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 1, 14, 1, 106, 1, 6, 1, 5, 1, 64, 3, 4, 115, 101, 108, 102, 10, 7, 97, 100, 100, 114, 101, 115, 115, 1, 3, 108, 101, 110, 119, 0, 15, 4, 0, 16, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 114, 101, 97, 100, 1, 16, 1, 106, 0, 1, 5, 1, 64, 3, 4, 115, 101, 108, 102, 10, 7, 97, 100, 100, 114, 101, 115, 115, 1, 4, 100, 97, 116, 97, 6, 0, 17, 4, 0, 17, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 119, 114, 105, 116, 101, 1, 18, 1, 64, 4, 4, 115, 101, 108, 102, 10, 7, 97, 100, 100, 114, 101, 115, 115, 1, 5, 119, 114, 105, 116, 101, 6, 8, 114, 101, 97, 100, 45, 108, 101, 110, 119, 0, 17, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 119, 114, 105, 116, 101, 45, 114, 101, 97, 100, 1, 19, 3, 1, 25, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 105, 50, 99, 64, 48, 46, 48, 46, 48, 5, 2, 1, 66, 16, 1, 109, 1, 5, 111, 116, 104, 101, 114, 4, 0, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 3, 0, 0, 4, 0, 14, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 3, 1, 1, 104, 2, 1, 64, 1, 4, 115, 101, 108, 102, 3, 0, 123, 4, 0, 37, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 109, 97, 120, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 1, 4, 1, 106, 0, 1, 1, 1, 64, 2, 4, 115, 101, 108, 102, 3, 4, 100, 117, 116, 121, 123, 0, 5, 4, 0, 37, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 1, 6, 1, 64, 1, 4, 115, 101, 108, 102, 3, 0, 5, 4, 0, 47, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 45, 102, 117, 108, 108, 121, 45, 111, 102, 102, 1, 7, 4, 0, 46, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 45, 102, 117, 108, 108, 121, 45, 111, 110, 1, 7, 1, 64, 3, 4, 115, 101, 108, 102, 3, 3, 110, 117, 109, 123, 5, 100, 101, 110, 111, 109, 123, 0, 5, 4, 0, 46, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 45, 102, 114, 97, 99, 116, 105, 111, 110, 1, 8, 1, 64, 2, 4, 115, 101, 108, 102, 3, 7, 112, 101, 114, 99, 101, 110, 116, 125, 0, 5, 4, 0, 45, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 45, 112, 101, 114, 99, 101, 110, 116, 1, 9, 3, 1, 25, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 112, 119, 109, 64, 48, 46, 48, 46, 48, 5, 3, 1, 66, 44, 1, 109, 2, 8, 105, 100, 108, 101, 45, 108, 111, 119, 9, 105, 100, 108, 101, 45, 104, 105, 103, 104, 4, 0, 8, 112, 111, 108, 97, 114, 105, 116, 121, 3, 0, 0, 1, 109, 2, 27, 99, 97, 112, 116, 117, 114, 101, 45, 111, 110, 45, 102, 105, 114, 115, 116, 45, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 28, 99, 97, 112, 116, 117, 114, 101, 45, 111, 110, 45, 115, 101, 99, 111, 110, 100, 45, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 4, 0, 5, 112, 104, 97, 115, 101, 3, 0, 2, 1, 114, 2, 8, 112, 111, 108, 97, 114, 105, 116, 121, 1, 5, 112, 104, 97, 115, 101, 3, 4, 0, 4, 109, 111, 100, 101, 3, 0, 4, 1, 109, 5, 7, 111, 118, 101, 114, 114, 117, 110, 10, 109, 111, 100, 101, 45, 102, 97, 117, 108, 116, 12, 102, 114, 97, 109, 101, 45, 102, 111, 114, 109, 97, 116, 17, 99, 104, 105, 112, 45, 115, 101, 108, 101, 99, 116, 45, 102, 97, 117, 108, 116, 5, 111, 116, 104, 101, 114, 4, 0, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 3, 0, 6, 1, 125, 4, 0, 4, 119, 111, 114, 100, 3, 0, 8, 1, 112, 9, 1, 111, 2, 119, 10, 1, 113, 4, 4, 114, 101, 97, 100, 1, 119, 0, 5, 119, 114, 105, 116, 101, 1, 10, 0, 8, 116, 114, 97, 110, 115, 102, 101, 114, 1, 11, 0, 8, 100, 101, 108, 97, 121, 45, 110, 115, 1, 121, 0, 4, 0, 9, 111, 112, 101, 114, 97, 116, 105, 111, 110, 3, 0, 12, 4, 0, 3, 98, 117, 115, 3, 1, 4, 0, 6, 100, 101, 118, 105, 99, 101, 3, 1, 1, 104, 14, 1, 106, 1, 10, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 16, 3, 108, 101, 110, 119, 0, 17, 4, 0, 16, 91, 109, 101, 116, 104, 111, 100, 93, 98, 117, 115, 46, 114, 101, 97, 100, 1, 18, 1, 106, 0, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 16, 5, 119, 111, 114, 100, 115, 10, 0, 19, 4, 0, 17, 91, 109, 101, 116, 104, 111, 100, 93, 98, 117, 115, 46, 119, 114, 105, 116, 101, 1, 20, 1, 64, 3, 4, 115, 101, 108, 102, 16, 8, 114, 101, 97, 100, 45, 108, 101, 110, 119, 5, 119, 114, 105, 116, 101, 10, 0, 17, 4, 0, 20, 91, 109, 101, 116, 104, 111, 100, 93, 98, 117, 115, 46, 116, 114, 97, 110, 115, 102, 101, 114, 1, 21, 1, 64, 1, 4, 115, 101, 108, 102, 16, 0, 19, 4, 0, 17, 91, 109, 101, 116, 104, 111, 100, 93, 98, 117, 115, 46, 102, 108, 117, 115, 104, 1, 22, 1, 104, 15, 1, 112, 13, 1, 112, 10, 1, 106, 1, 25, 1, 7, 1, 64, 2, 4, 115, 101, 108, 102, 23, 10, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 24, 0, 26, 4, 0, 26, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 118, 105, 99, 101, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 1, 27, 1, 64, 2, 4, 115, 101, 108, 102, 23, 3, 108, 101, 110, 119, 0, 17, 4, 0, 19, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 118, 105, 99, 101, 46, 114, 101, 97, 100, 1, 28, 1, 64, 2, 4, 115, 101, 108, 102, 23, 3, 98, 117, 102, 10, 0, 19, 4, 0, 20, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 118, 105, 99, 101, 46, 119, 114, 105, 116, 101, 1, 29, 1, 64, 3, 4, 115, 101, 108, 102, 23, 8, 114, 101, 97, 100, 45, 108, 101, 110, 119, 5, 119, 114, 105, 116, 101, 10, 0, 17, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 118, 105, 99, 101, 46, 116, 114, 97, 110, 115, 102, 101, 114, 1, 30, 1, 64, 0, 0, 5, 4, 0, 5, 109, 111, 100, 101, 48, 1, 31, 4, 0, 5, 109, 111, 100, 101, 49, 1, 31, 4, 0, 5, 109, 111, 100, 101, 50, 1, 31, 4, 0, 5, 109, 111, 100, 101, 51, 1, 31, 3, 1, 25, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 115, 112, 105, 64, 48, 46, 48, 46, 48, 5, 4, 2, 3, 0, 1, 10, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 2, 3, 0, 0, 5, 100, 101, 108, 97, 121, 1, 66, 8, 2, 3, 2, 1, 5, 4, 0, 10, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 3, 0, 0, 2, 3, 2, 1, 6, 4, 0, 5, 100, 101, 108, 97, 121, 3, 0, 2, 1, 105, 1, 1, 105, 3, 1, 64, 2, 3, 108, 101, 100, 4, 5, 100, 101, 108, 97, 121, 5, 1, 0, 4, 0, 3, 114, 117, 110, 1, 6, 4, 1, 25, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 114, 117, 110, 64, 48, 46, 48, 46, 48, 5, 7, 4, 1, 27, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 98, 108, 105, 110, 107, 64, 48, 46, 48, 46, 48, 4, 0, 11, 11, 1, 0, 5, 98, 108, 105, 110, 107, 3, 12, 0, 0, 179, 62, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 100, 111, 99, 115, 34, 58, 34, 69, 109, 98, 101, 100, 100, 101, 100, 32, 65, 80, 73, 115, 46, 34, 44, 34, 119, 111, 114, 108, 100, 115, 34, 58, 123, 34, 98, 108, 105, 110, 107, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 32, 119, 111, 114, 108, 100, 32, 116, 111, 32, 98, 108, 105, 110, 107, 32, 105, 110, 46, 32, 87, 101, 32, 105, 109, 112, 111, 114, 116, 32, 97, 108, 108, 32, 116, 104, 101, 32, 101, 109, 98, 101, 100, 100, 101, 100, 32, 65, 80, 73, 115, 44, 32, 97, 110, 100, 32, 101, 120, 112, 111, 114, 116, 32, 116, 104, 101, 92, 110, 114, 117, 110, 32, 105, 110, 116, 101, 114, 102, 97, 99, 101, 32, 119, 101, 32, 100, 101, 99, 108, 97, 114, 101, 100, 32, 97, 98, 111, 118, 101, 46, 34, 125, 125, 44, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 115, 34, 58, 123, 34, 105, 50, 99, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 73, 194, 178, 67, 46, 34, 44, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 34, 58, 34, 69, 120, 101, 99, 117, 116, 101, 32, 116, 104, 101, 32, 112, 114, 111, 118, 105, 100, 101, 100, 32, 96, 111, 112, 101, 114, 97, 116, 105, 111, 110, 96, 115, 32, 111, 110, 32, 116, 104, 101, 32, 73, 194, 178, 67, 32, 98, 117, 115, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 114, 101, 97, 100, 34, 58, 34, 82, 101, 97, 100, 115, 32, 96, 108, 101, 110, 96, 32, 98, 121, 116, 101, 115, 32, 102, 114, 111, 109, 32, 97, 100, 100, 114, 101, 115, 115, 32, 96, 97, 100, 100, 114, 101, 115, 115, 96, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 119, 114, 105, 116, 101, 34, 58, 34, 87, 114, 105, 116, 101, 115, 32, 98, 121, 116, 101, 115, 32, 116, 111, 32, 97, 100, 100, 114, 101, 115, 115, 32, 96, 97, 100, 100, 114, 101, 115, 115, 96, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 119, 114, 105, 116, 101, 45, 114, 101, 97, 100, 34, 58, 34, 87, 114, 105, 116, 101, 115, 32, 98, 121, 116, 101, 115, 32, 116, 111, 32, 97, 100, 100, 114, 101, 115, 115, 32, 96, 97, 100, 100, 114, 101, 115, 115, 96, 32, 97, 110, 100, 32, 116, 104, 101, 110, 32, 114, 101, 97, 100, 115, 32, 96, 114, 101, 97, 100, 45, 108, 101, 110, 96, 32, 98, 121, 116, 101, 115, 92, 110, 105, 110, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 34, 125, 44, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 97, 100, 100, 114, 101, 115, 115, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 110, 32, 97, 100, 100, 114, 101, 115, 115, 32, 118, 97, 108, 117, 101, 44, 32, 105, 110, 32, 101, 105, 116, 104, 101, 114, 32, 55, 45, 98, 105, 116, 32, 111, 114, 32, 49, 48, 45, 98, 105, 116, 32, 102, 111, 114, 109, 44, 32, 100, 101, 112, 101, 110, 100, 105, 110, 103, 32, 111, 110, 32, 116, 104, 101, 32, 100, 101, 118, 105, 99, 101, 46, 34, 125, 44, 34, 110, 111, 45, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 45, 115, 111, 117, 114, 99, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 78, 111, 45, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 101, 114, 114, 111, 114, 32, 115, 111, 117, 114, 99, 101, 46, 92, 110, 92, 110, 73, 110, 32, 99, 97, 115, 101, 115, 32, 119, 104, 101, 114, 101, 32, 105, 116, 32, 105, 115, 32, 112, 111, 115, 115, 105, 98, 108, 101, 44, 32, 97, 32, 100, 101, 118, 105, 99, 101, 32, 115, 104, 111, 117, 108, 100, 32, 105, 110, 100, 105, 99, 97, 116, 101, 32, 105, 102, 32, 97, 32, 110, 111, 92, 110, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 114, 101, 115, 112, 111, 110, 115, 101, 32, 119, 97, 115, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 116, 111, 32, 97, 110, 32, 97, 100, 100, 114, 101, 115, 115, 32, 118, 101, 114, 115, 117, 115, 32, 97, 32, 110, 111, 32, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 92, 110, 116, 111, 32, 97, 32, 100, 97, 116, 97, 32, 98, 121, 116, 101, 46, 32, 87, 104, 101, 114, 101, 32, 105, 116, 32, 105, 115, 32, 110, 111, 116, 32, 112, 111, 115, 115, 105, 98, 108, 101, 32, 116, 111, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 105, 97, 116, 101, 44, 32, 85, 110, 107, 110, 111, 119, 110, 92, 110, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 105, 110, 100, 105, 99, 97, 116, 101, 100, 46, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 97, 100, 100, 114, 101, 115, 115, 34, 58, 34, 84, 104, 101, 32, 100, 101, 118, 105, 99, 101, 32, 100, 105, 100, 32, 110, 111, 116, 32, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 105, 116, 115, 32, 97, 100, 100, 114, 101, 115, 115, 46, 32, 84, 104, 101, 32, 100, 101, 118, 105, 99, 101, 32, 109, 97, 121, 32, 98, 101, 92, 110, 109, 105, 115, 115, 105, 110, 103, 46, 34, 44, 34, 100, 97, 116, 97, 34, 58, 34, 84, 104, 101, 32, 100, 101, 118, 105, 99, 101, 32, 100, 105, 100, 32, 110, 111, 116, 32, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 116, 104, 101, 32, 100, 97, 116, 97, 46, 32, 73, 116, 32, 109, 97, 121, 32, 110, 111, 116, 32, 98, 101, 32, 114, 101, 97, 100, 121, 32, 116, 111, 92, 110, 112, 114, 111, 99, 101, 115, 115, 32, 114, 101, 113, 117, 101, 115, 116, 115, 32, 97, 116, 32, 116, 104, 101, 32, 109, 111, 109, 101, 110, 116, 46, 34, 44, 34, 117, 110, 107, 110, 111, 119, 110, 34, 58, 34, 69, 105, 116, 104, 101, 114, 32, 116, 104, 101, 32, 100, 101, 118, 105, 99, 101, 32, 100, 105, 100, 32, 110, 111, 116, 32, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 105, 116, 115, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 114, 32, 116, 104, 101, 32, 100, 97, 116, 97, 44, 32, 98, 117, 116, 92, 110, 105, 116, 32, 105, 115, 32, 117, 110, 107, 110, 111, 119, 110, 32, 119, 104, 105, 99, 104, 46, 34, 125, 125, 44, 34, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 101, 114, 114, 111, 114, 115, 46, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 98, 117, 115, 34, 58, 34, 66, 117, 115, 32, 101, 114, 114, 111, 114, 32, 111, 99, 99, 117, 114, 114, 101, 100, 46, 32, 101, 46, 103, 46, 32, 65, 32, 83, 84, 65, 82, 84, 32, 111, 114, 32, 97, 32, 83, 84, 79, 80, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 105, 115, 32, 100, 101, 116, 101, 99, 116, 101, 100, 32, 97, 110, 100, 92, 110, 105, 115, 32, 110, 111, 116, 32, 108, 111, 99, 97, 116, 101, 100, 32, 97, 102, 116, 101, 114, 32, 97, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 111, 102, 32, 57, 32, 83, 67, 76, 32, 99, 108, 111, 99, 107, 32, 112, 117, 108, 115, 101, 115, 46, 34, 44, 34, 97, 114, 98, 105, 116, 114, 97, 116, 105, 111, 110, 45, 108, 111, 115, 115, 34, 58, 34, 84, 104, 101, 32, 97, 114, 98, 105, 116, 114, 97, 116, 105, 111, 110, 32, 119, 97, 115, 32, 108, 111, 115, 116, 44, 32, 101, 46, 103, 46, 32, 101, 108, 101, 99, 116, 114, 105, 99, 97, 108, 32, 112, 114, 111, 98, 108, 101, 109, 115, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 99, 108, 111, 99, 107, 32, 115, 105, 103, 110, 97, 108, 46, 34, 44, 34, 110, 111, 45, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 34, 58, 34, 65, 32, 98, 117, 115, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 32, 119, 97, 115, 32, 110, 111, 116, 32, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 100, 44, 32, 101, 46, 103, 46, 32, 100, 117, 101, 32, 116, 111, 32, 116, 104, 101, 32, 97, 100, 100, 114, 101, 115, 115, 101, 100, 92, 110, 100, 101, 118, 105, 99, 101, 32, 110, 111, 116, 32, 98, 101, 105, 110, 103, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32, 111, 110, 32, 116, 104, 101, 32, 98, 117, 115, 32, 111, 114, 32, 116, 104, 101, 32, 100, 101, 118, 105, 99, 101, 32, 110, 111, 116, 32, 98, 101, 105, 110, 103, 32, 114, 101, 97, 100, 121, 92, 110, 116, 111, 32, 112, 114, 111, 99, 101, 115, 115, 32, 114, 101, 113, 117, 101, 115, 116, 115, 32, 97, 116, 32, 116, 104, 101, 32, 109, 111, 109, 101, 110, 116, 46, 34, 44, 34, 111, 118, 101, 114, 114, 117, 110, 34, 58, 34, 84, 104, 101, 32, 112, 101, 114, 105, 112, 104, 101, 114, 97, 108, 32, 114, 101, 99, 101, 105, 118, 101, 32, 98, 117, 102, 102, 101, 114, 32, 119, 97, 115, 32, 111, 118, 101, 114, 114, 117, 110, 46, 34, 44, 34, 111, 116, 104, 101, 114, 34, 58, 34, 65, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 101, 114, 114, 111, 114, 32, 111, 99, 99, 117, 114, 114, 101, 100, 46, 34, 125, 125, 44, 34, 111, 112, 101, 114, 97, 116, 105, 111, 110, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 110, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 32, 117, 115, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 96, 116, 114, 97, 110, 115, 99, 116, 105, 111, 110, 96, 32, 109, 101, 116, 104, 111, 100, 46, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 114, 101, 97, 100, 34, 58, 34, 82, 101, 97, 100, 32, 116, 104, 101, 32, 103, 105, 118, 101, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 98, 121, 116, 101, 115, 46, 34, 44, 34, 119, 114, 105, 116, 101, 34, 58, 34, 87, 114, 105, 116, 101, 32, 116, 104, 101, 32, 103, 105, 118, 101, 110, 32, 98, 121, 116, 101, 115, 46, 34, 125, 125, 125, 125, 44, 34, 100, 105, 103, 105, 116, 97, 108, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 68, 105, 103, 105, 116, 97, 108, 32, 73, 47, 79, 44, 32, 102, 111, 114, 32, 101, 120, 97, 109, 112, 108, 101, 32, 71, 80, 73, 79, 32, 112, 105, 110, 115, 46, 34, 44, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 91, 109, 101, 116, 104, 111, 100, 93, 105, 110, 112, 117, 116, 45, 112, 105, 110, 46, 105, 115, 45, 108, 111, 119, 34, 58, 34, 73, 115, 32, 116, 104, 101, 32, 105, 110, 112, 117, 116, 32, 112, 105, 110, 32, 108, 111, 119, 63, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 105, 110, 112, 117, 116, 45, 112, 105, 110, 46, 105, 115, 45, 104, 105, 103, 104, 34, 58, 34, 73, 115, 32, 116, 104, 101, 32, 105, 110, 112, 117, 116, 32, 112, 105, 110, 32, 104, 105, 103, 104, 63, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 115, 101, 116, 45, 108, 111, 119, 34, 58, 34, 68, 114, 105, 118, 101, 115, 32, 116, 104, 101, 32, 112, 105, 110, 32, 108, 111, 119, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 115, 101, 116, 45, 104, 105, 103, 104, 34, 58, 34, 68, 114, 105, 118, 101, 115, 32, 116, 104, 101, 32, 112, 105, 110, 32, 104, 105, 103, 104, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 115, 101, 116, 45, 115, 116, 97, 116, 101, 34, 58, 34, 68, 114, 105, 118, 101, 115, 32, 116, 104, 101, 32, 112, 105, 110, 32, 104, 105, 103, 104, 32, 111, 114, 32, 108, 111, 119, 32, 100, 101, 112, 101, 110, 100, 105, 110, 103, 32, 111, 110, 32, 116, 104, 101, 32, 112, 114, 111, 118, 105, 100, 101, 100, 32, 118, 97, 108, 117, 101, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 115, 116, 97, 116, 101, 102, 117, 108, 45, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 105, 115, 45, 115, 101, 116, 45, 104, 105, 103, 104, 34, 58, 34, 73, 115, 32, 116, 104, 101, 32, 112, 105, 110, 32, 105, 110, 32, 100, 114, 105, 118, 101, 32, 104, 105, 103, 104, 32, 109, 111, 100, 101, 63, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 115, 116, 97, 116, 101, 102, 117, 108, 45, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 105, 115, 45, 115, 101, 116, 45, 108, 111, 119, 34, 58, 34, 73, 115, 32, 116, 104, 101, 32, 112, 105, 110, 32, 105, 110, 32, 100, 114, 105, 118, 101, 32, 108, 111, 119, 32, 109, 111, 100, 101, 63, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 115, 116, 97, 116, 101, 102, 117, 108, 45, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 46, 116, 111, 103, 103, 108, 101, 34, 58, 34, 84, 111, 103, 103, 108, 101, 32, 112, 105, 110, 32, 111, 117, 116, 112, 117, 116, 46, 34, 125, 44, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 101, 114, 114, 111, 114, 115, 46, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 111, 116, 104, 101, 114, 34, 58, 34, 65, 110, 32, 101, 114, 114, 111, 114, 32, 111, 99, 99, 117, 114, 114, 101, 100, 46, 34, 125, 125, 44, 34, 112, 105, 110, 45, 115, 116, 97, 116, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 68, 105, 103, 105, 116, 97, 108, 32, 111, 117, 116, 112, 117, 116, 32, 112, 105, 110, 32, 115, 116, 97, 116, 101, 46, 34, 125, 44, 34, 105, 110, 112, 117, 116, 45, 112, 105, 110, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 83, 105, 110, 103, 108, 101, 32, 100, 105, 103, 105, 116, 97, 108, 32, 105, 110, 112, 117, 116, 32, 112, 105, 110, 46, 34, 125, 44, 34, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 83, 105, 110, 103, 108, 101, 32, 100, 105, 103, 105, 116, 97, 108, 32, 105, 110, 112, 117, 116, 32, 112, 105, 110, 46, 34, 125, 44, 34, 115, 116, 97, 116, 101, 102, 117, 108, 45, 111, 117, 116, 112, 117, 116, 45, 112, 105, 110, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 80, 117, 115, 104, 45, 112, 117, 108, 108, 32, 111, 117, 116, 112, 117, 116, 32, 112, 105, 110, 32, 116, 104, 97, 116, 32, 99, 97, 110, 32, 114, 101, 97, 100, 32, 105, 116, 115, 32, 111, 117, 116, 112, 117, 116, 32, 115, 116, 97, 116, 101, 46, 34, 125, 125, 125, 44, 34, 100, 101, 108, 97, 121, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 68, 101, 108, 97, 121, 115, 46, 34, 44, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 108, 97, 121, 46, 100, 101, 108, 97, 121, 45, 110, 115, 34, 58, 34, 80, 97, 117, 115, 101, 115, 32, 101, 120, 101, 99, 117, 116, 105, 111, 110, 32, 102, 111, 114, 32, 97, 116, 32, 109, 105, 110, 105, 109, 117, 109, 32, 96, 110, 115, 96, 32, 110, 97, 110, 111, 115, 101, 99, 111, 110, 100, 115, 46, 32, 80, 97, 117, 115, 101, 32, 99, 97, 110, 32, 98, 101, 92, 110, 108, 111, 110, 103, 101, 114, 32, 105, 102, 32, 116, 104, 101, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 114, 101, 113, 117, 105, 114, 101, 115, 32, 105, 116, 32, 100, 117, 101, 32, 116, 111, 32, 112, 114, 101, 99, 105, 115, 105, 111, 110, 47, 116, 105, 109, 105, 110, 103, 92, 110, 105, 115, 115, 117, 101, 115, 46, 34, 125, 44, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 100, 101, 108, 97, 121, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 68, 101, 108, 97, 121, 32, 119, 105, 116, 104, 32, 117, 112, 32, 116, 111, 32, 110, 97, 110, 111, 115, 101, 99, 111, 110, 100, 32, 112, 114, 101, 99, 105, 115, 105, 111, 110, 46, 34, 125, 125, 125, 44, 34, 114, 117, 110, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 110, 32, 105, 110, 116, 101, 114, 102, 97, 99, 101, 32, 116, 111, 32, 114, 117, 110, 32, 111, 117, 114, 32, 92, 34, 98, 108, 105, 110, 107, 92, 34, 32, 112, 114, 111, 103, 114, 97, 109, 46, 92, 110, 92, 110, 84, 104, 101, 32, 96, 114, 117, 110, 96, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 97, 107, 101, 115, 32, 116, 104, 101, 32, 101, 120, 112, 101, 99, 116, 101, 100, 32, 104, 97, 114, 100, 119, 97, 114, 101, 32, 114, 101, 115, 111, 117, 114, 99, 101, 115, 32, 97, 115, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 46, 34, 44, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 114, 117, 110, 34, 58, 34, 83, 116, 97, 114, 116, 32, 116, 104, 101, 32, 112, 114, 111, 103, 114, 97, 109, 44, 32, 119, 105, 116, 104, 32, 97, 110, 32, 111, 117, 116, 112, 117, 116, 32, 112, 105, 110, 32, 97, 110, 100, 32, 97, 32, 100, 101, 108, 97, 121, 32, 109, 101, 99, 104, 97, 110, 105, 115, 109, 46, 34, 125, 125, 44, 34, 112, 119, 109, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 80, 117, 108, 115, 101, 32, 87, 105, 100, 116, 104, 32, 77, 111, 100, 117, 108, 97, 116, 105, 111, 110, 32, 40, 80, 87, 77, 41, 46, 34, 44, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 109, 97, 120, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 34, 58, 34, 71, 101, 116, 32, 116, 104, 101, 32, 109, 97, 120, 105, 109, 117, 109, 32, 100, 117, 116, 121, 32, 99, 121, 99, 108, 101, 32, 118, 97, 108, 117, 101, 46, 92, 110, 92, 110, 84, 104, 105, 115, 32, 118, 97, 108, 117, 101, 32, 99, 111, 114, 114, 101, 115, 112, 111, 110, 100, 115, 32, 116, 111, 32, 97, 32, 49, 48, 48, 37, 32, 100, 117, 116, 121, 32, 99, 121, 99, 108, 101, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 34, 58, 34, 83, 101, 116, 32, 116, 104, 101, 32, 100, 117, 116, 121, 32, 99, 121, 99, 108, 101, 32, 116, 111, 32, 96, 100, 117, 116, 121, 32, 47, 32, 109, 97, 120, 95, 100, 117, 116, 121, 96, 46, 92, 110, 92, 110, 84, 114, 97, 112, 115, 32, 105, 102, 32, 116, 104, 101, 32, 100, 117, 116, 121, 32, 99, 121, 99, 108, 101, 32, 118, 97, 108, 117, 101, 32, 105, 115, 32, 103, 114, 101, 97, 116, 101, 114, 32, 116, 104, 97, 110, 32, 116, 104, 101, 32, 109, 97, 120, 105, 109, 117, 109, 32, 100, 117, 116, 121, 92, 110, 99, 121, 99, 108, 101, 32, 118, 97, 108, 117, 101, 44, 32, 97, 115, 32, 114, 101, 112, 111, 114, 116, 101, 100, 32, 98, 121, 32, 96, 109, 97, 120, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 96, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 45, 102, 117, 108, 108, 121, 45, 111, 102, 102, 34, 58, 34, 83, 101, 116, 32, 116, 104, 101, 32, 100, 117, 116, 121, 32, 99, 121, 99, 108, 101, 32, 116, 111, 32, 48, 37, 44, 32, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 105, 110, 97, 99, 116, 105, 118, 101, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 45, 102, 117, 108, 108, 121, 45, 111, 110, 34, 58, 34, 83, 101, 116, 32, 116, 104, 101, 32, 100, 117, 116, 121, 32, 99, 121, 99, 108, 101, 32, 116, 111, 32, 49, 48, 48, 37, 44, 32, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 97, 99, 116, 105, 118, 101, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 45, 102, 114, 97, 99, 116, 105, 111, 110, 34, 58, 34, 83, 101, 116, 32, 116, 104, 101, 32, 100, 117, 116, 121, 32, 99, 121, 99, 108, 101, 32, 116, 111, 32, 96, 110, 117, 109, 32, 47, 32, 100, 101, 110, 111, 109, 96, 46, 92, 110, 92, 110, 84, 114, 97, 112, 115, 32, 105, 102, 32, 96, 110, 117, 109, 96, 32, 105, 115, 32, 103, 114, 101, 97, 116, 101, 114, 32, 116, 104, 97, 110, 32, 96, 100, 101, 110, 111, 109, 96, 44, 32, 111, 114, 32, 105, 102, 32, 96, 100, 101, 110, 111, 109, 96, 32, 105, 115, 32, 122, 101, 114, 111, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 46, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 45, 112, 101, 114, 99, 101, 110, 116, 34, 58, 34, 83, 101, 116, 32, 116, 104, 101, 32, 100, 117, 116, 121, 32, 99, 121, 99, 108, 101, 32, 116, 111, 32, 96, 112, 101, 114, 99, 101, 110, 116, 32, 47, 32, 49, 48, 48, 96, 46, 92, 110, 92, 110, 84, 114, 97, 112, 115, 32, 105, 102, 32, 96, 112, 101, 114, 99, 101, 110, 116, 96, 32, 105, 115, 32, 103, 114, 101, 97, 116, 101, 114, 32, 116, 104, 97, 110, 32, 49, 48, 48, 46, 34, 125, 44, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 101, 114, 114, 111, 114, 115, 46, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 111, 116, 104, 101, 114, 34, 58, 34, 65, 110, 32, 101, 114, 114, 111, 114, 32, 111, 99, 99, 117, 114, 114, 101, 100, 46, 34, 125, 125, 44, 34, 115, 101, 116, 45, 100, 117, 116, 121, 45, 99, 121, 99, 108, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 83, 105, 110, 103, 108, 101, 32, 80, 87, 77, 32, 99, 104, 97, 110, 110, 101, 108, 32, 47, 32, 112, 105, 110, 46, 34, 125, 125, 125, 44, 34, 115, 112, 105, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 109, 111, 100, 101, 48, 34, 58, 34, 72, 101, 108, 112, 101, 114, 32, 102, 111, 114, 32, 67, 80, 79, 76, 32, 61, 32, 48, 44, 32, 67, 80, 72, 65, 32, 61, 32, 48, 46, 34, 44, 34, 109, 111, 100, 101, 49, 34, 58, 34, 72, 101, 108, 112, 101, 114, 32, 102, 111, 114, 32, 67, 80, 79, 76, 32, 61, 32, 48, 44, 32, 67, 80, 72, 65, 32, 61, 32, 49, 46, 34, 44, 34, 109, 111, 100, 101, 50, 34, 58, 34, 72, 101, 108, 112, 101, 114, 32, 102, 111, 114, 32, 67, 80, 79, 76, 32, 61, 32, 49, 44, 32, 67, 80, 72, 65, 32, 61, 32, 48, 46, 34, 44, 34, 109, 111, 100, 101, 51, 34, 58, 34, 72, 101, 108, 112, 101, 114, 32, 102, 111, 114, 32, 67, 80, 79, 76, 32, 61, 32, 49, 44, 32, 67, 80, 72, 65, 32, 61, 32, 49, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 98, 117, 115, 46, 114, 101, 97, 100, 34, 58, 34, 82, 101, 97, 100, 32, 119, 111, 114, 100, 115, 46, 92, 110, 92, 110, 84, 104, 101, 32, 119, 111, 114, 100, 32, 118, 97, 108, 117, 101, 32, 115, 101, 110, 116, 32, 111, 110, 32, 77, 79, 83, 73, 32, 100, 117, 114, 105, 110, 103, 32, 114, 101, 97, 100, 105, 110, 103, 32, 105, 115, 92, 110, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 45, 100, 101, 102, 105, 110, 101, 100, 44, 32, 116, 121, 112, 105, 99, 97, 108, 108, 121, 32, 48, 120, 48, 48, 44, 32, 48, 120, 70, 70, 44, 32, 111, 114, 32, 99, 111, 110, 102, 105, 103, 117, 114, 97, 98, 108, 101, 46, 92, 110, 92, 110, 73, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 115, 32, 97, 114, 101, 32, 97, 108, 108, 111, 119, 101, 100, 32, 116, 111, 32, 114, 101, 116, 117, 114, 110, 32, 98, 101, 102, 111, 114, 101, 32, 116, 104, 101, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 112, 108, 101, 116, 101, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 98, 117, 115, 46, 119, 114, 105, 116, 101, 34, 58, 34, 87, 114, 105, 116, 101, 32, 96, 119, 111, 114, 100, 115, 96, 44, 32, 105, 103, 110, 111, 114, 105, 110, 103, 32, 97, 108, 108, 32, 116, 104, 101, 32, 105, 110, 99, 111, 109, 105, 110, 103, 32, 119, 111, 114, 100, 115, 46, 92, 110, 92, 110, 73, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 115, 32, 97, 114, 101, 32, 97, 108, 108, 111, 119, 101, 100, 32, 116, 111, 32, 114, 101, 116, 117, 114, 110, 32, 98, 101, 102, 111, 114, 101, 32, 116, 104, 101, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 112, 108, 101, 116, 101, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 98, 117, 115, 46, 116, 114, 97, 110, 115, 102, 101, 114, 34, 58, 34, 87, 114, 105, 116, 101, 32, 97, 110, 100, 32, 114, 101, 97, 100, 32, 115, 105, 109, 117, 108, 116, 97, 110, 101, 111, 117, 115, 108, 121, 46, 32, 96, 119, 114, 105, 116, 101, 96, 32, 105, 115, 32, 119, 114, 105, 116, 116, 101, 110, 32, 111, 110, 32, 77, 79, 83, 73, 32, 97, 110, 100, 32, 119, 111, 114, 100, 115, 92, 110, 114, 101, 99, 101, 105, 118, 101, 100, 32, 111, 110, 32, 77, 73, 83, 79, 32, 97, 114, 101, 32, 114, 101, 116, 117, 114, 110, 101, 100, 46, 92, 110, 92, 110, 73, 116, 32, 105, 115, 32, 97, 108, 108, 111, 119, 101, 100, 32, 102, 111, 114, 32, 96, 114, 101, 97, 100, 45, 108, 101, 110, 96, 32, 97, 110, 100, 32, 96, 119, 114, 105, 116, 101, 96, 39, 115, 32, 108, 101, 110, 103, 116, 104, 32, 116, 111, 32, 98, 101, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 44, 92, 110, 101, 118, 101, 110, 32, 122, 101, 114, 111, 32, 108, 101, 110, 103, 116, 104, 46, 32, 84, 104, 101, 32, 116, 114, 97, 110, 115, 102, 101, 114, 32, 114, 117, 110, 115, 32, 102, 111, 114, 32, 96, 109, 97, 120, 40, 114, 101, 97, 100, 45, 108, 101, 110, 44, 32, 119, 114, 105, 116, 101, 46, 108, 101, 110, 40, 41, 41, 96, 92, 110, 119, 111, 114, 100, 115, 46, 32, 73, 102, 32, 96, 114, 101, 97, 100, 45, 108, 101, 110, 96, 32, 105, 115, 32, 115, 104, 111, 114, 116, 101, 114, 44, 32, 105, 110, 99, 111, 109, 105, 110, 103, 32, 119, 111, 114, 100, 115, 32, 97, 102, 116, 101, 114, 32, 96, 114, 101, 97, 100, 45, 108, 101, 110, 96, 32, 104, 97, 115, 92, 110, 98, 101, 101, 110, 32, 102, 105, 108, 108, 101, 100, 32, 119, 105, 108, 108, 32, 98, 101, 32, 100, 105, 115, 99, 97, 114, 100, 101, 100, 46, 32, 73, 102, 32, 96, 119, 114, 105, 116, 101, 96, 32, 105, 115, 32, 115, 104, 111, 114, 116, 101, 114, 44, 32, 116, 104, 101, 32, 118, 97, 108, 117, 101, 32, 111, 102, 92, 110, 119, 111, 114, 100, 115, 32, 115, 101, 110, 116, 32, 105, 110, 32, 77, 79, 83, 73, 32, 97, 102, 116, 101, 114, 32, 97, 108, 108, 32, 96, 119, 114, 105, 116, 101, 96, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 115, 101, 110, 116, 32, 105, 115, 92, 110, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 45, 100, 101, 102, 105, 110, 101, 100, 44, 32, 116, 121, 112, 105, 99, 97, 108, 108, 121, 32, 96, 48, 120, 48, 48, 96, 44, 32, 96, 48, 120, 70, 70, 96, 44, 32, 111, 114, 32, 99, 111, 110, 102, 105, 103, 117, 114, 97, 98, 108, 101, 46, 92, 110, 92, 110, 73, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 115, 32, 97, 114, 101, 32, 97, 108, 108, 111, 119, 101, 100, 32, 116, 111, 32, 114, 101, 116, 117, 114, 110, 32, 98, 101, 102, 111, 114, 101, 32, 116, 104, 101, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 112, 108, 101, 116, 101, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 98, 117, 115, 46, 102, 108, 117, 115, 104, 34, 58, 34, 87, 97, 105, 116, 32, 117, 110, 116, 105, 108, 32, 97, 108, 108, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 32, 104, 97, 118, 101, 32, 99, 111, 109, 112, 108, 101, 116, 101, 100, 32, 97, 110, 100, 32, 116, 104, 101, 32, 98, 117, 115, 32, 105, 115, 32, 105, 100, 108, 101, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 118, 105, 99, 101, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 34, 58, 34, 80, 101, 114, 102, 111, 114, 109, 32, 97, 32, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 32, 97, 103, 97, 105, 110, 115, 116, 32, 116, 104, 101, 32, 100, 101, 118, 105, 99, 101, 46, 92, 110, 92, 110, 45, 32, 76, 111, 99, 107, 115, 32, 116, 104, 101, 32, 98, 117, 115, 92, 110, 45, 32, 65, 115, 115, 101, 114, 116, 115, 32, 116, 104, 101, 32, 67, 83, 32, 40, 67, 104, 105, 112, 32, 83, 101, 108, 101, 99, 116, 41, 32, 112, 105, 110, 46, 92, 110, 45, 32, 80, 101, 114, 102, 111, 114, 109, 115, 32, 97, 108, 108, 32, 116, 104, 101, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 46, 92, 110, 45, 32, 70, 108, 117, 115, 104, 101, 115, 32, 116, 104, 101, 32, 98, 117, 115, 46, 92, 110, 45, 32, 68, 101, 97, 115, 115, 101, 114, 116, 115, 32, 116, 104, 101, 32, 67, 83, 32, 112, 105, 110, 46, 92, 110, 45, 32, 85, 110, 108, 111, 99, 107, 115, 32, 116, 104, 101, 32, 98, 117, 115, 46, 92, 110, 92, 110, 84, 104, 101, 32, 108, 111, 99, 107, 105, 110, 103, 32, 109, 101, 99, 104, 97, 110, 105, 115, 109, 32, 105, 115, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 45, 100, 101, 102, 105, 110, 101, 100, 46, 32, 84, 104, 101, 32, 111, 110, 108, 121, 92, 110, 114, 101, 113, 117, 105, 114, 101, 109, 101, 110, 116, 32, 105, 115, 32, 105, 116, 32, 109, 117, 115, 116, 32, 112, 114, 101, 118, 101, 110, 116, 32, 116, 119, 111, 32, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 115, 32, 102, 114, 111, 109, 32, 101, 120, 101, 99, 117, 116, 105, 110, 103, 92, 110, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 108, 121, 32, 97, 103, 97, 105, 110, 115, 116, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 98, 117, 115, 46, 32, 69, 120, 97, 109, 112, 108, 101, 115, 32, 111, 102, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 115, 32, 97, 114, 101, 58, 92, 110, 99, 114, 105, 116, 105, 99, 97, 108, 32, 115, 101, 99, 116, 105, 111, 110, 115, 44, 32, 98, 108, 111, 99, 107, 105, 110, 103, 32, 109, 117, 116, 101, 120, 101, 115, 44, 32, 114, 101, 116, 117, 114, 110, 105, 110, 103, 32, 97, 110, 32, 101, 114, 114, 111, 114, 32, 111, 114, 92, 110, 112, 97, 110, 105, 99, 107, 105, 110, 103, 32, 105, 102, 32, 116, 104, 101, 32, 98, 117, 115, 32, 105, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 98, 117, 115, 121, 46, 32, 79, 110, 32, 98, 117, 115, 32, 101, 114, 114, 111, 114, 115, 32, 116, 104, 101, 92, 110, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 115, 104, 111, 117, 108, 100, 32, 116, 114, 121, 32, 116, 111, 32, 100, 101, 97, 115, 115, 101, 114, 116, 32, 67, 83, 46, 32, 73, 102, 32, 97, 110, 32, 101, 114, 114, 111, 114, 32, 111, 99, 99, 117, 114, 115, 32, 119, 104, 105, 108, 101, 92, 110, 100, 101, 97, 115, 115, 101, 114, 116, 105, 110, 103, 32, 67, 83, 32, 116, 104, 101, 32, 98, 117, 115, 32, 101, 114, 114, 111, 114, 32, 115, 104, 111, 117, 108, 100, 32, 116, 97, 107, 101, 32, 112, 114, 105, 111, 114, 105, 116, 121, 32, 97, 115, 32, 116, 104, 101, 32, 114, 101, 116, 117, 114, 110, 92, 110, 118, 97, 108, 117, 101, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 118, 105, 99, 101, 46, 114, 101, 97, 100, 34, 58, 34, 68, 111, 32, 97, 32, 114, 101, 97, 100, 32, 119, 105, 116, 104, 105, 110, 32, 97, 32, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 118, 105, 99, 101, 46, 119, 114, 105, 116, 101, 34, 58, 34, 68, 111, 32, 97, 32, 119, 114, 105, 116, 101, 32, 119, 105, 116, 104, 105, 110, 32, 97, 32, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 34, 44, 34, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 118, 105, 99, 101, 46, 116, 114, 97, 110, 115, 102, 101, 114, 34, 58, 34, 68, 111, 32, 97, 32, 116, 114, 97, 110, 115, 102, 101, 114, 32, 119, 105, 116, 104, 105, 110, 32, 97, 32, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 34, 125, 44, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 112, 111, 108, 97, 114, 105, 116, 121, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 108, 111, 99, 107, 32, 112, 111, 108, 97, 114, 105, 116, 121, 46, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 105, 100, 108, 101, 45, 108, 111, 119, 34, 58, 34, 67, 108, 111, 99, 107, 32, 115, 105, 103, 110, 97, 108, 32, 108, 111, 119, 32, 119, 104, 101, 110, 32, 105, 100, 108, 101, 46, 34, 44, 34, 105, 100, 108, 101, 45, 104, 105, 103, 104, 34, 58, 34, 67, 108, 111, 99, 107, 32, 115, 105, 103, 110, 97, 108, 32, 104, 105, 103, 104, 32, 119, 104, 101, 110, 32, 105, 100, 108, 101, 46, 34, 125, 125, 44, 34, 112, 104, 97, 115, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 108, 111, 99, 107, 32, 112, 104, 97, 115, 101, 46, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 99, 97, 112, 116, 117, 114, 101, 45, 111, 110, 45, 102, 105, 114, 115, 116, 45, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 34, 58, 34, 68, 97, 116, 97, 32, 105, 110, 32, 226, 128, 156, 99, 97, 112, 116, 117, 114, 101, 100, 226, 128, 157, 32, 111, 110, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 99, 108, 111, 99, 107, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 46, 34, 44, 34, 99, 97, 112, 116, 117, 114, 101, 45, 111, 110, 45, 115, 101, 99, 111, 110, 100, 45, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 34, 58, 34, 68, 97, 116, 97, 32, 105, 110, 32, 226, 128, 156, 99, 97, 112, 116, 117, 114, 101, 100, 226, 128, 157, 32, 111, 110, 32, 116, 104, 101, 32, 115, 101, 99, 111, 110, 100, 32, 99, 108, 111, 99, 107, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 46, 34, 125, 125, 44, 34, 109, 111, 100, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 83, 80, 73, 32, 109, 111, 100, 101, 46, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 112, 111, 108, 97, 114, 105, 116, 121, 34, 58, 34, 67, 108, 111, 99, 107, 32, 112, 111, 108, 97, 114, 105, 116, 121, 46, 34, 44, 34, 112, 104, 97, 115, 101, 34, 58, 34, 67, 108, 111, 99, 107, 32, 112, 104, 97, 115, 101, 46, 34, 125, 125, 44, 34, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 83, 80, 73, 32, 101, 114, 114, 111, 114, 32, 107, 105, 110, 100, 46, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 111, 118, 101, 114, 114, 117, 110, 34, 58, 34, 84, 104, 101, 32, 112, 101, 114, 105, 112, 104, 101, 114, 97, 108, 32, 114, 101, 99, 101, 105, 118, 101, 32, 98, 117, 102, 102, 101, 114, 32, 119, 97, 115, 32, 111, 118, 101, 114, 114, 117, 110, 46, 34, 44, 34, 109, 111, 100, 101, 45, 102, 97, 117, 108, 116, 34, 58, 34, 77, 117, 108, 116, 105, 112, 108, 101, 32, 100, 101, 118, 105, 99, 101, 115, 32, 111, 110, 32, 116, 104, 101, 32, 83, 80, 73, 32, 98, 117, 115, 32, 97, 114, 101, 32, 116, 114, 121, 105, 110, 103, 32, 116, 111, 32, 100, 114, 105, 118, 101, 32, 116, 104, 101, 32, 99, 104, 105, 112, 92, 110, 115, 101, 108, 101, 99, 116, 32, 112, 105, 110, 46, 34, 44, 34, 102, 114, 97, 109, 101, 45, 102, 111, 114, 109, 97, 116, 34, 58, 34, 82, 101, 99, 101, 105, 118, 101, 100, 32, 100, 97, 116, 97, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 99, 111, 110, 102, 111, 114, 109, 32, 116, 111, 32, 116, 104, 101, 32, 112, 101, 114, 105, 112, 104, 101, 114, 97, 108, 32, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 46, 34, 44, 34, 99, 104, 105, 112, 45, 115, 101, 108, 101, 99, 116, 45, 102, 97, 117, 108, 116, 34, 58, 34, 65, 110, 32, 101, 114, 114, 111, 114, 32, 111, 99, 99, 117, 114, 114, 101, 100, 32, 119, 104, 105, 108, 101, 32, 97, 115, 115, 101, 114, 116, 105, 110, 103, 32, 111, 114, 32, 100, 101, 97, 115, 115, 101, 114, 116, 105, 110, 103, 32, 116, 104, 101, 92, 110, 67, 104, 105, 112, 32, 83, 101, 108, 101, 99, 116, 32, 112, 105, 110, 46, 34, 44, 34, 111, 116, 104, 101, 114, 34, 58, 34, 65, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 101, 114, 114, 111, 114, 32, 111, 99, 99, 117, 114, 114, 101, 100, 46, 34, 125, 125, 44, 34, 119, 111, 114, 100, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 87, 111, 114, 100, 32, 115, 105, 122, 101, 46, 92, 110, 92, 110, 84, 79, 68, 79, 58, 32, 83, 117, 112, 112, 111, 114, 116, 32, 117, 112, 32, 116, 111, 32, 96, 117, 49, 54, 96, 32, 119, 111, 114, 100, 32, 115, 105, 122, 101, 115, 63, 34, 125, 44, 34, 111, 112, 101, 114, 97, 116, 105, 111, 110, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 83, 80, 73, 32, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 46, 92, 110, 92, 110, 84, 104, 105, 115, 32, 97, 108, 108, 111, 119, 115, 32, 99, 111, 109, 112, 111, 115, 105, 116, 105, 111, 110, 32, 111, 102, 32, 83, 80, 73, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 32, 105, 110, 116, 111, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 98, 117, 115, 32, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 114, 101, 97, 100, 34, 58, 34, 82, 101, 97, 100, 32, 100, 97, 116, 97, 46, 34, 44, 34, 119, 114, 105, 116, 101, 34, 58, 34, 87, 114, 105, 116, 101, 32, 100, 97, 116, 97, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 112, 114, 111, 118, 105, 100, 101, 100, 32, 108, 105, 115, 116, 44, 32, 100, 105, 115, 99, 97, 114, 100, 105, 110, 103, 32, 114, 101, 97, 100, 32, 100, 97, 116, 97, 46, 34, 44, 34, 116, 114, 97, 110, 115, 102, 101, 114, 34, 58, 34, 82, 101, 97, 100, 32, 100, 97, 116, 97, 44, 32, 119, 104, 105, 108, 101, 32, 119, 114, 105, 116, 105, 110, 103, 32, 100, 97, 116, 97, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 98, 117, 102, 102, 101, 114, 46, 34, 44, 34, 100, 101, 108, 97, 121, 45, 110, 115, 34, 58, 34, 68, 101, 108, 97, 121, 32, 102, 111, 114, 32, 97, 116, 32, 108, 101, 97, 115, 116, 32, 116, 104, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 110, 97, 110, 111, 115, 101, 99, 111, 110, 100, 115, 46, 34, 125, 125, 44, 34, 98, 117, 115, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 83, 80, 73, 32, 98, 117, 115, 46, 92, 110, 92, 110, 96, 98, 117, 115, 96, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 115, 32, 101, 120, 99, 108, 117, 115, 105, 118, 101, 32, 111, 119, 110, 101, 114, 115, 104, 105, 112, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 119, 104, 111, 108, 101, 32, 83, 80, 73, 32, 98, 117, 115, 44, 32, 119, 105, 116, 104, 32, 83, 67, 75, 44, 92, 110, 77, 79, 83, 73, 32, 97, 110, 100, 32, 77, 73, 83, 79, 32, 112, 105, 110, 115, 46, 34, 125, 44, 34, 100, 101, 118, 105, 99, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 83, 80, 73, 32, 100, 101, 118, 105, 99, 101, 32, 116, 114, 97, 105, 116, 46, 92, 110, 92, 110, 96, 100, 101, 118, 105, 99, 101, 96, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 115, 32, 111, 119, 110, 101, 114, 115, 104, 105, 112, 32, 111, 118, 101, 114, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 83, 80, 73, 32, 100, 101, 118, 105, 99, 101, 32, 111, 110, 32, 97, 32, 40, 112, 111, 115, 115, 105, 98, 108, 121, 92, 110, 115, 104, 97, 114, 101, 100, 41, 32, 98, 117, 115, 44, 32, 115, 101, 108, 101, 99, 116, 101, 100, 32, 119, 105, 116, 104, 32, 97, 32, 67, 83, 32, 40, 67, 104, 105, 112, 32, 83, 101, 108, 101, 99, 116, 41, 32, 112, 105, 110, 46, 34, 125, 125, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
